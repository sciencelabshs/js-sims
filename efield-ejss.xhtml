<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <title>earth field and potential model</title>

    <script src="./_ejs_library/scripts/common_script.js"></script>
    <script src="./_ejs_library/scripts/textresizedetector.js"></script>
    <script src="./_ejs_library/ejsS.v1.max.js"></script>
<script type="text/javascript"><!--//--><![CDATA[//><!--
/* _inputParameters: an object with different values for the model parameters */
function electricfieldwee(_topFrame,_libraryPath,_codebasePath, _inputParameters) {
  var _model = EJSS_CORE.createAnimationLMS();
  var _view;
  var _isPlaying = false;
  var _isPaused = true;
  var _isMobile = (navigator===undefined) ? false : navigator.userAgent.match(/iPhone|iPad|iPod|Android|BlackBerry|Opera Mini|IEMobile/i);

var _stringProperties = {};
  var _tools = {
    showInputDialog : EJSS_INTERFACE.BoxPanel.showInputDialog,
    showOkDialog : EJSS_INTERFACE.BoxPanel.showOkDialog,
    showOkCancelDialog : EJSS_INTERFACE.BoxPanel.showOkCancelDialog,
    downloadText: EJSS_TOOLS.File.downloadText,
    uploadText: function(action) { EJSS_TOOLS.File.uploadText(_model,action); }
  };

  function _play()  { _isPaused = false; _isPlaying = true;  _model.play();  }
  function _pause() { _isPaused = true;  _isPlaying = false; _model.pause(); }
  function _step()  { _pause();  _model.step(); }
  function _reset() { _model.reset();  _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); }
  _model._play  = _play;
  _model._pause = _pause;
  _model._step  = _step;
  _model._reset = _reset;
  function _update() { _model.update(); }
  function _initialize() { _model.initialize(); }
  function _setFPS(_fps) { _model.setFPS(_fps); }
  function _setDelay(_delay) { _model.setDelay(_delay); }
  function _setStepsPerDisplay(_spd) { _model.setStepsPerDisplay(_spd); }
  function _setUpdateView(_updateView) { _model.setUpdateView(_updateView); }
  function _setAutoplay(_auto) { _model.setAutoplay(_auto); }
  function _println(_message) { console.log(_message); }

  function _breakAfterThisPage() { _model.setShouldBreak(true); }

  function _resetSolvers() { if (_model.resetSolvers) _model.resetSolvers(); }

  function _saveText(name,type,content) { if (_model.saveText) _model.saveText(name,type,content); }

  function _saveState(name) { if (_model.saveState) _model.saveState(name); }

  function _saveImage(name,panelname) { if (_model.saveImage) _model.saveImage(name,panelname); }

  function _readState(url,type) { if (_model.readState) _model.readState(url,type); }

  function _readText(url,type,varname) { if (_model.readText) _model.readText(url,type,varname); }

  function _getStringProperty(propertyName) {
    var _value = _stringProperties[propertyName];
    if (_value===undefined) return propertyName;
    else return _value;
  }
  var __pagesEnabled = [];
  function _setPageEnabled(pageName,enabled) { __pagesEnabled[pageName] = enabled; }

  var print; // EjsS Model.Variables.variables.print
  var fontb; // EjsS Model.Variables.variables.fontb
  var font; // EjsS Model.Variables.variables.font
  var pi; // EjsS Model.Variables.variables.pi
  var k; // EjsS Model.Variables.variables.k
  var i; // EjsS Model.Variables.variables.i
  var i2; // EjsS Model.Variables.variables.i2
  var j; // EjsS Model.Variables.variables.j
  var vectorIndex; // EjsS Model.Variables.variables.vectorIndex
  var n; // EjsS Model.Variables.variables.n
  var nMax; // EjsS Model.Variables.variables.nMax
  var nVectors; // EjsS Model.Variables.variables.nVectors
  var nVectorsMax; // EjsS Model.Variables.variables.nVectorsMax
  var nVectorsSq; // EjsS Model.Variables.variables.nVectorsSq
  var textpos; // EjsS Model.Variables.variables.textpos
  var x; // EjsS Model.Variables.variables.x
  var xtest; // EjsS Model.Variables.variables.xtest
  var ytest; // EjsS Model.Variables.variables.ytest
  var xtest0; // EjsS Model.Variables.variables.xtest0
  var ytest0; // EjsS Model.Variables.variables.ytest0
  var y; // EjsS Model.Variables.variables.y
  var q; // EjsS Model.Variables.variables.q
  var qtest; // EjsS Model.Variables.variables.qtest
  var q0; // EjsS Model.Variables.variables.q0
  var q1; // EjsS Model.Variables.variables.q1
  var q2; // EjsS Model.Variables.variables.q2
  var q3; // EjsS Model.Variables.variables.q3
  var q4; // EjsS Model.Variables.variables.q4
  var Ex; // EjsS Model.Variables.variables.Ex
  var Ey; // EjsS Model.Variables.variables.Ey
  var Enetx; // EjsS Model.Variables.variables.Enetx
  var Enety; // EjsS Model.Variables.variables.Enety
  var Enet; // EjsS Model.Variables.variables.Enet
  var Vnet; // EjsS Model.Variables.variables.Vnet
  var Fieldmag; // EjsS Model.Variables.variables.Fieldmag
  var Fieldx; // EjsS Model.Variables.variables.Fieldx
  var Fieldy; // EjsS Model.Variables.variables.Fieldy
  var Vectorx; // EjsS Model.Variables.variables.Vectorx
  var Vectory; // EjsS Model.Variables.variables.Vectory
  var posx; // EjsS Model.Variables.variables.posx
  var posy; // EjsS Model.Variables.variables.posy
  var chargeLabel; // EjsS Model.Variables.variables.chargeLabel
  var helpLabel; // EjsS Model.Variables.variables.helpLabel
  var FieldFlag; // EjsS Model.Variables.variables.FieldFlag
  var helpFlag; // EjsS Model.Variables.variables.helpFlag
  var zeroval; // EjsS Model.Variables.variables.zeroval
  var rSquared; // EjsS Model.Variables.variables.rSquared
  var feedback; // EjsS Model.Variables.variables.feedback
  var answerchoice; // EjsS Model.Variables.variables.answerchoice
  var scramble; // EjsS Model.Variables.variables.scramble
  var randnum; // EjsS Model.Variables.variables.randnum
  var backgroundColor; // EjsS Model.Variables.variables.backgroundColor
  var movableflag; // EjsS Model.Variables.variables.movableflag
  var showlinesflag; // EjsS Model.Variables.variables.showlinesflag

  var t; // EjsS Model.Variables.lookang.t
  var dt; // EjsS Model.Variables.lookang.dt
  var vxtest; // EjsS Model.Variables.lookang.vxtest
  var vytest; // EjsS Model.Variables.lookang.vytest
  var vxtest0; // EjsS Model.Variables.lookang.vxtest0
  var vytest0; // EjsS Model.Variables.lookang.vytest0
  var xmin; // EjsS Model.Variables.lookang.xmin
  var xmax; // EjsS Model.Variables.lookang.xmax
  var ymin; // EjsS Model.Variables.lookang.ymin
  var ymax; // EjsS Model.Variables.lookang.ymax
  var text; // EjsS Model.Variables.lookang.text
  var text1; // EjsS Model.Variables.lookang.text1
  var radius; // EjsS Model.Variables.lookang.radius
  var selectedn; // EjsS Model.Variables.lookang.selectedn
  var selectednVectors; // EjsS Model.Variables.lookang.selectednVectors
  var selected; // EjsS Model.Variables.lookang.selected

  var redness; // EjsS Model.Variables.color variables.redness
  var greenness; // EjsS Model.Variables.color variables.greenness
  var blueness; // EjsS Model.Variables.color variables.blueness
  var colorball; // EjsS Model.Variables.color variables.colorball
  var colorballtext; // EjsS Model.Variables.color variables.colorballtext
  var colorVectors; // EjsS Model.Variables.color variables.colorVectors
  var backColor; // EjsS Model.Variables.color variables.backColor

  var Android; // EjsS Model.Variables.layout.Android
  var iPhone; // EjsS Model.Variables.layout.iPhone
  var iPad; // EjsS Model.Variables.layout.iPad
  var iOS; // EjsS Model.Variables.layout.iOS
  var isAndroid; // EjsS Model.Variables.layout.isAndroid
  var Width; // EjsS Model.Variables.layout.Width
  var Height; // EjsS Model.Variables.layout.Height
  var Width1; // EjsS Model.Variables.layout.Width1
  var xvst; // EjsS Model.Variables.layout.xvst
  var vvst; // EjsS Model.Variables.layout.vvst
  var avst; // EjsS Model.Variables.layout.avst
  var disabledworld; // EjsS Model.Variables.layout.disabledworld
  var disabled; // EjsS Model.Variables.layout.disabled

  var _privateOdesList;
  var _ODEi_evolution1;
  var userEvents1=[];

  _model.getOdes = function() { return [_ODEi_evolution1]; };

  _model.removeEvents = function(){
    userEvents1=[];
  };

  function _serialize() { return _model.serialize(); }

  _model._userSerialize = function() {
    return {
      print : print,
      fontb : fontb,
      font : font,
      pi : pi,
      k : k,
      i : i,
      i2 : i2,
      j : j,
      vectorIndex : vectorIndex,
      n : n,
      nMax : nMax,
      nVectors : nVectors,
      nVectorsMax : nVectorsMax,
      nVectorsSq : nVectorsSq,
      textpos : textpos,
      x : x,
      xtest : xtest,
      ytest : ytest,
      xtest0 : xtest0,
      ytest0 : ytest0,
      y : y,
      q : q,
      qtest : qtest,
      q0 : q0,
      q1 : q1,
      q2 : q2,
      q3 : q3,
      q4 : q4,
      Ex : Ex,
      Ey : Ey,
      Enetx : Enetx,
      Enety : Enety,
      Enet : Enet,
      Vnet : Vnet,
      Fieldmag : Fieldmag,
      Fieldx : Fieldx,
      Fieldy : Fieldy,
      Vectorx : Vectorx,
      Vectory : Vectory,
      posx : posx,
      posy : posy,
      chargeLabel : chargeLabel,
      helpLabel : helpLabel,
      FieldFlag : FieldFlag,
      helpFlag : helpFlag,
      zeroval : zeroval,
      rSquared : rSquared,
      feedback : feedback,
      answerchoice : answerchoice,
      scramble : scramble,
      randnum : randnum,
      backgroundColor : backgroundColor,
      movableflag : movableflag,
      showlinesflag : showlinesflag,
      t : t,
      dt : dt,
      vxtest : vxtest,
      vytest : vytest,
      vxtest0 : vxtest0,
      vytest0 : vytest0,
      xmin : xmin,
      xmax : xmax,
      ymin : ymin,
      ymax : ymax,
      text : text,
      text1 : text1,
      radius : radius,
      selectedn : selectedn,
      selectednVectors : selectednVectors,
      selected : selected,
      redness : redness,
      greenness : greenness,
      blueness : blueness,
      colorball : colorball,
      colorballtext : colorballtext,
      colorVectors : colorVectors,
      backColor : backColor,
      Android : Android,
      iPhone : iPhone,
      iPad : iPad,
      iOS : iOS,
      isAndroid : isAndroid,
      Width : Width,
      Height : Height,
      Width1 : Width1,
      xvst : xvst,
      vvst : vvst,
      avst : avst,
      disabledworld : disabledworld,
      disabled : disabled
    };
  };

  function _serializePublic() { return _model.serializePublic(); }

  _model._userSerializePublic = function() {
    return {
      print : print,
      fontb : fontb,
      font : font,
      pi : pi,
      k : k,
      i : i,
      i2 : i2,
      j : j,
      vectorIndex : vectorIndex,
      n : n,
      nMax : nMax,
      nVectors : nVectors,
      nVectorsMax : nVectorsMax,
      nVectorsSq : nVectorsSq,
      textpos : textpos,
      x : x,
      xtest : xtest,
      ytest : ytest,
      xtest0 : xtest0,
      ytest0 : ytest0,
      y : y,
      q : q,
      qtest : qtest,
      q0 : q0,
      q1 : q1,
      q2 : q2,
      q3 : q3,
      q4 : q4,
      Ex : Ex,
      Ey : Ey,
      Enetx : Enetx,
      Enety : Enety,
      Enet : Enet,
      Vnet : Vnet,
      Fieldmag : Fieldmag,
      Fieldx : Fieldx,
      Fieldy : Fieldy,
      Vectorx : Vectorx,
      Vectory : Vectory,
      posx : posx,
      posy : posy,
      chargeLabel : chargeLabel,
      helpLabel : helpLabel,
      FieldFlag : FieldFlag,
      helpFlag : helpFlag,
      zeroval : zeroval,
      rSquared : rSquared,
      feedback : feedback,
      answerchoice : answerchoice,
      scramble : scramble,
      randnum : randnum,
      backgroundColor : backgroundColor,
      movableflag : movableflag,
      showlinesflag : showlinesflag,
      t : t,
      dt : dt,
      vxtest : vxtest,
      vytest : vytest,
      vxtest0 : vxtest0,
      vytest0 : vytest0,
      xmin : xmin,
      xmax : xmax,
      ymin : ymin,
      ymax : ymax,
      text : text,
      text1 : text1,
      radius : radius,
      selectedn : selectedn,
      selectednVectors : selectednVectors,
      selected : selected,
      redness : redness,
      greenness : greenness,
      blueness : blueness,
      colorball : colorball,
      colorballtext : colorballtext,
      colorVectors : colorVectors,
      backColor : backColor,
      Android : Android,
      iPhone : iPhone,
      iPad : iPad,
      iOS : iOS,
      isAndroid : isAndroid,
      Width : Width,
      Height : Height,
      Width1 : Width1,
      xvst : xvst,
      vvst : vvst,
      avst : avst,
      disabledworld : disabledworld,
      disabled : disabled
    };
  };

  _model._readParameters = function(json) {
    if(typeof json.print != "undefined") print = json.print;
    if(typeof json.fontb != "undefined") fontb = json.fontb;
    if(typeof json.font != "undefined") font = json.font;
    if(typeof json.pi != "undefined") pi = json.pi;
    if(typeof json.k != "undefined") k = json.k;
    if(typeof json.i != "undefined") i = json.i;
    if(typeof json.i2 != "undefined") i2 = json.i2;
    if(typeof json.j != "undefined") j = json.j;
    if(typeof json.vectorIndex != "undefined") vectorIndex = json.vectorIndex;
    if(typeof json.n != "undefined") n = json.n;
    if(typeof json.nMax != "undefined") nMax = json.nMax;
    if(typeof json.nVectors != "undefined") nVectors = json.nVectors;
    if(typeof json.nVectorsMax != "undefined") nVectorsMax = json.nVectorsMax;
    if(typeof json.nVectorsSq != "undefined") nVectorsSq = json.nVectorsSq;
    if(typeof json.textpos != "undefined") textpos = json.textpos;
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.xtest != "undefined") xtest = json.xtest;
    if(typeof json.ytest != "undefined") ytest = json.ytest;
    if(typeof json.xtest0 != "undefined") xtest0 = json.xtest0;
    if(typeof json.ytest0 != "undefined") ytest0 = json.ytest0;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.q != "undefined") q = json.q;
    if(typeof json.qtest != "undefined") qtest = json.qtest;
    if(typeof json.q0 != "undefined") q0 = json.q0;
    if(typeof json.q1 != "undefined") q1 = json.q1;
    if(typeof json.q2 != "undefined") q2 = json.q2;
    if(typeof json.q3 != "undefined") q3 = json.q3;
    if(typeof json.q4 != "undefined") q4 = json.q4;
    if(typeof json.Ex != "undefined") Ex = json.Ex;
    if(typeof json.Ey != "undefined") Ey = json.Ey;
    if(typeof json.Enetx != "undefined") Enetx = json.Enetx;
    if(typeof json.Enety != "undefined") Enety = json.Enety;
    if(typeof json.Enet != "undefined") Enet = json.Enet;
    if(typeof json.Vnet != "undefined") Vnet = json.Vnet;
    if(typeof json.Fieldmag != "undefined") Fieldmag = json.Fieldmag;
    if(typeof json.Fieldx != "undefined") Fieldx = json.Fieldx;
    if(typeof json.Fieldy != "undefined") Fieldy = json.Fieldy;
    if(typeof json.Vectorx != "undefined") Vectorx = json.Vectorx;
    if(typeof json.Vectory != "undefined") Vectory = json.Vectory;
    if(typeof json.posx != "undefined") posx = json.posx;
    if(typeof json.posy != "undefined") posy = json.posy;
    if(typeof json.chargeLabel != "undefined") chargeLabel = json.chargeLabel;
    if(typeof json.helpLabel != "undefined") helpLabel = json.helpLabel;
    if(typeof json.FieldFlag != "undefined") FieldFlag = json.FieldFlag;
    if(typeof json.helpFlag != "undefined") helpFlag = json.helpFlag;
    if(typeof json.zeroval != "undefined") zeroval = json.zeroval;
    if(typeof json.rSquared != "undefined") rSquared = json.rSquared;
    if(typeof json.feedback != "undefined") feedback = json.feedback;
    if(typeof json.answerchoice != "undefined") answerchoice = json.answerchoice;
    if(typeof json.scramble != "undefined") scramble = json.scramble;
    if(typeof json.randnum != "undefined") randnum = json.randnum;
    if(typeof json.backgroundColor != "undefined") backgroundColor = json.backgroundColor;
    if(typeof json.movableflag != "undefined") movableflag = json.movableflag;
    if(typeof json.showlinesflag != "undefined") showlinesflag = json.showlinesflag;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.dt != "undefined") dt = json.dt;
    if(typeof json.vxtest != "undefined") vxtest = json.vxtest;
    if(typeof json.vytest != "undefined") vytest = json.vytest;
    if(typeof json.vxtest0 != "undefined") vxtest0 = json.vxtest0;
    if(typeof json.vytest0 != "undefined") vytest0 = json.vytest0;
    if(typeof json.xmin != "undefined") xmin = json.xmin;
    if(typeof json.xmax != "undefined") xmax = json.xmax;
    if(typeof json.ymin != "undefined") ymin = json.ymin;
    if(typeof json.ymax != "undefined") ymax = json.ymax;
    if(typeof json.text != "undefined") text = json.text;
    if(typeof json.text1 != "undefined") text1 = json.text1;
    if(typeof json.radius != "undefined") radius = json.radius;
    if(typeof json.selectedn != "undefined") selectedn = json.selectedn;
    if(typeof json.selectednVectors != "undefined") selectednVectors = json.selectednVectors;
    if(typeof json.selected != "undefined") selected = json.selected;
    if(typeof json.redness != "undefined") redness = json.redness;
    if(typeof json.greenness != "undefined") greenness = json.greenness;
    if(typeof json.blueness != "undefined") blueness = json.blueness;
    if(typeof json.colorball != "undefined") colorball = json.colorball;
    if(typeof json.colorballtext != "undefined") colorballtext = json.colorballtext;
    if(typeof json.colorVectors != "undefined") colorVectors = json.colorVectors;
    if(typeof json.backColor != "undefined") backColor = json.backColor;
    if(typeof json.Android != "undefined") Android = json.Android;
    if(typeof json.iPhone != "undefined") iPhone = json.iPhone;
    if(typeof json.iPad != "undefined") iPad = json.iPad;
    if(typeof json.iOS != "undefined") iOS = json.iOS;
    if(typeof json.isAndroid != "undefined") isAndroid = json.isAndroid;
    if(typeof json.Width != "undefined") Width = json.Width;
    if(typeof json.Height != "undefined") Height = json.Height;
    if(typeof json.Width1 != "undefined") Width1 = json.Width1;
    if(typeof json.xvst != "undefined") xvst = json.xvst;
    if(typeof json.vvst != "undefined") vvst = json.vvst;
    if(typeof json.avst != "undefined") avst = json.avst;
    if(typeof json.disabledworld != "undefined") disabledworld = json.disabledworld;
    if(typeof json.disabled != "undefined") disabled = json.disabled;
  };

  _model._readParametersPublic = function(json) {
    if(typeof json.print != "undefined") print = json.print;
    if(typeof json.fontb != "undefined") fontb = json.fontb;
    if(typeof json.font != "undefined") font = json.font;
    if(typeof json.pi != "undefined") pi = json.pi;
    if(typeof json.k != "undefined") k = json.k;
    if(typeof json.i != "undefined") i = json.i;
    if(typeof json.i2 != "undefined") i2 = json.i2;
    if(typeof json.j != "undefined") j = json.j;
    if(typeof json.vectorIndex != "undefined") vectorIndex = json.vectorIndex;
    if(typeof json.n != "undefined") n = json.n;
    if(typeof json.nMax != "undefined") nMax = json.nMax;
    if(typeof json.nVectors != "undefined") nVectors = json.nVectors;
    if(typeof json.nVectorsMax != "undefined") nVectorsMax = json.nVectorsMax;
    if(typeof json.nVectorsSq != "undefined") nVectorsSq = json.nVectorsSq;
    if(typeof json.textpos != "undefined") textpos = json.textpos;
    if(typeof json.x != "undefined") x = json.x;
    if(typeof json.xtest != "undefined") xtest = json.xtest;
    if(typeof json.ytest != "undefined") ytest = json.ytest;
    if(typeof json.xtest0 != "undefined") xtest0 = json.xtest0;
    if(typeof json.ytest0 != "undefined") ytest0 = json.ytest0;
    if(typeof json.y != "undefined") y = json.y;
    if(typeof json.q != "undefined") q = json.q;
    if(typeof json.qtest != "undefined") qtest = json.qtest;
    if(typeof json.q0 != "undefined") q0 = json.q0;
    if(typeof json.q1 != "undefined") q1 = json.q1;
    if(typeof json.q2 != "undefined") q2 = json.q2;
    if(typeof json.q3 != "undefined") q3 = json.q3;
    if(typeof json.q4 != "undefined") q4 = json.q4;
    if(typeof json.Ex != "undefined") Ex = json.Ex;
    if(typeof json.Ey != "undefined") Ey = json.Ey;
    if(typeof json.Enetx != "undefined") Enetx = json.Enetx;
    if(typeof json.Enety != "undefined") Enety = json.Enety;
    if(typeof json.Enet != "undefined") Enet = json.Enet;
    if(typeof json.Vnet != "undefined") Vnet = json.Vnet;
    if(typeof json.Fieldmag != "undefined") Fieldmag = json.Fieldmag;
    if(typeof json.Fieldx != "undefined") Fieldx = json.Fieldx;
    if(typeof json.Fieldy != "undefined") Fieldy = json.Fieldy;
    if(typeof json.Vectorx != "undefined") Vectorx = json.Vectorx;
    if(typeof json.Vectory != "undefined") Vectory = json.Vectory;
    if(typeof json.posx != "undefined") posx = json.posx;
    if(typeof json.posy != "undefined") posy = json.posy;
    if(typeof json.chargeLabel != "undefined") chargeLabel = json.chargeLabel;
    if(typeof json.helpLabel != "undefined") helpLabel = json.helpLabel;
    if(typeof json.FieldFlag != "undefined") FieldFlag = json.FieldFlag;
    if(typeof json.helpFlag != "undefined") helpFlag = json.helpFlag;
    if(typeof json.zeroval != "undefined") zeroval = json.zeroval;
    if(typeof json.rSquared != "undefined") rSquared = json.rSquared;
    if(typeof json.feedback != "undefined") feedback = json.feedback;
    if(typeof json.answerchoice != "undefined") answerchoice = json.answerchoice;
    if(typeof json.scramble != "undefined") scramble = json.scramble;
    if(typeof json.randnum != "undefined") randnum = json.randnum;
    if(typeof json.backgroundColor != "undefined") backgroundColor = json.backgroundColor;
    if(typeof json.movableflag != "undefined") movableflag = json.movableflag;
    if(typeof json.showlinesflag != "undefined") showlinesflag = json.showlinesflag;
    if(typeof json.t != "undefined") t = json.t;
    if(typeof json.dt != "undefined") dt = json.dt;
    if(typeof json.vxtest != "undefined") vxtest = json.vxtest;
    if(typeof json.vytest != "undefined") vytest = json.vytest;
    if(typeof json.vxtest0 != "undefined") vxtest0 = json.vxtest0;
    if(typeof json.vytest0 != "undefined") vytest0 = json.vytest0;
    if(typeof json.xmin != "undefined") xmin = json.xmin;
    if(typeof json.xmax != "undefined") xmax = json.xmax;
    if(typeof json.ymin != "undefined") ymin = json.ymin;
    if(typeof json.ymax != "undefined") ymax = json.ymax;
    if(typeof json.text != "undefined") text = json.text;
    if(typeof json.text1 != "undefined") text1 = json.text1;
    if(typeof json.radius != "undefined") radius = json.radius;
    if(typeof json.selectedn != "undefined") selectedn = json.selectedn;
    if(typeof json.selectednVectors != "undefined") selectednVectors = json.selectednVectors;
    if(typeof json.selected != "undefined") selected = json.selected;
    if(typeof json.redness != "undefined") redness = json.redness;
    if(typeof json.greenness != "undefined") greenness = json.greenness;
    if(typeof json.blueness != "undefined") blueness = json.blueness;
    if(typeof json.colorball != "undefined") colorball = json.colorball;
    if(typeof json.colorballtext != "undefined") colorballtext = json.colorballtext;
    if(typeof json.colorVectors != "undefined") colorVectors = json.colorVectors;
    if(typeof json.backColor != "undefined") backColor = json.backColor;
    if(typeof json.Android != "undefined") Android = json.Android;
    if(typeof json.iPhone != "undefined") iPhone = json.iPhone;
    if(typeof json.iPad != "undefined") iPad = json.iPad;
    if(typeof json.iOS != "undefined") iOS = json.iOS;
    if(typeof json.isAndroid != "undefined") isAndroid = json.isAndroid;
    if(typeof json.Width != "undefined") Width = json.Width;
    if(typeof json.Height != "undefined") Height = json.Height;
    if(typeof json.Width1 != "undefined") Width1 = json.Width1;
    if(typeof json.xvst != "undefined") xvst = json.xvst;
    if(typeof json.vvst != "undefined") vvst = json.vvst;
    if(typeof json.avst != "undefined") avst = json.avst;
    if(typeof json.disabledworld != "undefined") disabledworld = json.disabledworld;
    if(typeof json.disabled != "undefined") disabled = json.disabled;
  };

  function _unserializePublic(json) { return _model.unserializePublic(json); }

  _model._userUnserializePublic = function(json) {
    _model._readParametersPublic(json);
   _resetSolvers();
   _model.update();
  };

  function _unserialize(json) { return _model.unserialize(json); }

  _model._userUnserialize = function(json) {
    _model._readParameters(json);
   _resetSolvers();
   _model.update();
  };

  _model.addToReset(function() {
    __pagesEnabled["undefined"] = true;
    __pagesEnabled["menu"] = true;
    __pagesEnabled["Init Page"] = true;
    __pagesEnabled["svg"] = true;
    __pagesEnabled["axes"] = true;
    __pagesEnabled["set0position"] = false;
    __pagesEnabled["initialisetestcharge"] = true;
    __pagesEnabled["Evol Page"] = true;
    __pagesEnabled["Event"] = true;
    __pagesEnabled["Event 2"] = true;
    __pagesEnabled["Event 2 2"] = true;
    __pagesEnabled["Event 2 2 2"] = true;
    __pagesEnabled["Event 2 2 2 2"] = true;
    __pagesEnabled["sync sliders"] = true;
    __pagesEnabled["field vectors"] = true;
    __pagesEnabled["field vectors limit length"] = true;
    __pagesEnabled["charges setup"] = true;
    __pagesEnabled["limit"] = true;
    __pagesEnabled["labeltext"] = true;
    __pagesEnabled["lookang"] = true;
  });

  _model.addToReset(function() {
    print = false; // EjsS Model.Variables.variables.print
    fontb = "normal bold 2vw "; // EjsS Model.Variables.variables.fontb
    font = "normal normal 2vw "; // EjsS Model.Variables.variables.font
    pi = Math.PI; // EjsS Model.Variables.variables.pi
    k = 9; // EjsS Model.Variables.variables.k
    i = 0; // EjsS Model.Variables.variables.i
    i2 = 11; // EjsS Model.Variables.variables.i2
    j = 0; // EjsS Model.Variables.variables.j
    vectorIndex = 0; // EjsS Model.Variables.variables.vectorIndex
    n = 1; // EjsS Model.Variables.variables.n
    nMax = 5; // EjsS Model.Variables.variables.nMax
    nVectors = 15; // EjsS Model.Variables.variables.nVectors
    nVectorsMax = 15; // EjsS Model.Variables.variables.nVectorsMax
    nVectorsSq = nVectors*nVectors;; // EjsS Model.Variables.variables.nVectorsSq
    textpos = new Array(nVectors*nVectors); // EjsS Model.Variables.variables.textpos
    (function () {
      var _i0;
      for (_i0=0; _i0<nVectors*nVectors; _i0+=1) {  // EjsS Model.Variables.variables.textpos
        textpos[_i0] = "0";  // EjsS Model.Variables.variables.textpos
      }
    }());
    x = new Array(nMax); // EjsS Model.Variables.variables.x
    (function () {
      var _i0;
      for (_i0=0; _i0<nMax; _i0+=1) {  // EjsS Model.Variables.variables.x
        x[_i0] = 0;  // EjsS Model.Variables.variables.x
      }
    }());
    xtest = 2; // EjsS Model.Variables.variables.xtest
    ytest = 0; // EjsS Model.Variables.variables.ytest
    xtest0 = xtest; // EjsS Model.Variables.variables.xtest0
    ytest0 = ytest; // EjsS Model.Variables.variables.ytest0
    y = new Array(nMax); // EjsS Model.Variables.variables.y
    (function () {
      var _i0;
      for (_i0=0; _i0<nMax; _i0+=1) {  // EjsS Model.Variables.variables.y
        y[_i0] = 0;  // EjsS Model.Variables.variables.y
      }
    }());
    q = [1,1,1,1,1,1]; // EjsS Model.Variables.variables.q
    qtest = 1; // EjsS Model.Variables.variables.qtest
    q0 = q[0]; // EjsS Model.Variables.variables.q0
    q1 = q[1]; // EjsS Model.Variables.variables.q1
    q2 = q[2]; // EjsS Model.Variables.variables.q2
    q3 = q[3]; // EjsS Model.Variables.variables.q3
    q4 = q[4]; // EjsS Model.Variables.variables.q4
    Ex = new Array(nMax); // EjsS Model.Variables.variables.Ex
    (function () {
      var _i0;
      for (_i0=0; _i0<nMax; _i0+=1) {  // EjsS Model.Variables.variables.Ex
        Ex[_i0] = 0.0;  // EjsS Model.Variables.variables.Ex
      }
    }());
    Ey = new Array(nMax); // EjsS Model.Variables.variables.Ey
    (function () {
      var _i0;
      for (_i0=0; _i0<nMax; _i0+=1) {  // EjsS Model.Variables.variables.Ey
        Ey[_i0] = 0.0;  // EjsS Model.Variables.variables.Ey
      }
    }());
    Enetx = 0.0; // EjsS Model.Variables.variables.Enetx
    Enety = 0.0; // EjsS Model.Variables.variables.Enety
    Enet = 0.0; // EjsS Model.Variables.variables.Enet
    Vnet = 0.0; // EjsS Model.Variables.variables.Vnet
    Fieldmag = 0.0; // EjsS Model.Variables.variables.Fieldmag
    Fieldx = new Array(nVectorsSq); // EjsS Model.Variables.variables.Fieldx
    (function () {
      var _i0;
      for (_i0=0; _i0<nVectorsSq; _i0+=1) {  // EjsS Model.Variables.variables.Fieldx
        Fieldx[_i0] = 0.0;  // EjsS Model.Variables.variables.Fieldx
      }
    }());
    Fieldy = new Array(nVectorsSq); // EjsS Model.Variables.variables.Fieldy
    (function () {
      var _i0;
      for (_i0=0; _i0<nVectorsSq; _i0+=1) {  // EjsS Model.Variables.variables.Fieldy
        Fieldy[_i0] = 0.0;  // EjsS Model.Variables.variables.Fieldy
      }
    }());
    Vectorx = new Array(nVectorsSq); // EjsS Model.Variables.variables.Vectorx
    (function () {
      var _i0;
      for (_i0=0; _i0<nVectorsSq; _i0+=1) {  // EjsS Model.Variables.variables.Vectorx
        Vectorx[_i0] = 0.0;  // EjsS Model.Variables.variables.Vectorx
      }
    }());
    Vectory = new Array(nVectorsSq); // EjsS Model.Variables.variables.Vectory
    (function () {
      var _i0;
      for (_i0=0; _i0<nVectorsSq; _i0+=1) {  // EjsS Model.Variables.variables.Vectory
        Vectory[_i0] = 0.0;  // EjsS Model.Variables.variables.Vectory
      }
    }());
    posx = new Array(nVectorsSq); // EjsS Model.Variables.variables.posx
    (function () {
      var _i0;
      for (_i0=0; _i0<nVectorsSq; _i0+=1) {  // EjsS Model.Variables.variables.posx
        posx[_i0] = 0.0;  // EjsS Model.Variables.variables.posx
      }
    }());
    posy = new Array(nVectorsSq); // EjsS Model.Variables.variables.posy
    (function () {
      var _i0;
      for (_i0=0; _i0<nVectorsSq; _i0+=1) {  // EjsS Model.Variables.variables.posy
        posy[_i0] = 0.0;  // EjsS Model.Variables.variables.posy
      }
    }());
    chargeLabel = new Array(nMax); // EjsS Model.Variables.variables.chargeLabel
    (function () {
      var _i0;
      for (_i0=0; _i0<nMax; _i0+=1) {  // EjsS Model.Variables.variables.chargeLabel
        chargeLabel[_i0] = "";  // EjsS Model.Variables.variables.chargeLabel
      }
    }());
    helpLabel = "Show Help"; // EjsS Model.Variables.variables.helpLabel
    helpFlag = false; // EjsS Model.Variables.variables.helpFlag
    zeroval = 0.0; // EjsS Model.Variables.variables.zeroval
    rSquared = 1.0; // EjsS Model.Variables.variables.rSquared
    feedback = "Look for feedback here"; // EjsS Model.Variables.variables.feedback
    answerchoice = 1; // EjsS Model.Variables.variables.answerchoice
    scramble = 1.0; // EjsS Model.Variables.variables.scramble
    randnum = 0.0; // EjsS Model.Variables.variables.randnum
    backgroundColor = ""; // EjsS Model.Variables.variables.backgroundColor
    movableflag = true; // EjsS Model.Variables.variables.movableflag
    showlinesflag = false; // EjsS Model.Variables.variables.showlinesflag
  });

  _model.addToReset(function() {
    t = 0; // EjsS Model.Variables.lookang.t
    dt = 0.001; // EjsS Model.Variables.lookang.dt
    vxtest = 0; // EjsS Model.Variables.lookang.vxtest
    vytest = 0; // EjsS Model.Variables.lookang.vytest
    vxtest0 = vxtest; // EjsS Model.Variables.lookang.vxtest0
    vytest0 = vytest; // EjsS Model.Variables.lookang.vytest0
    xmin = -5; // EjsS Model.Variables.lookang.xmin
    xmax = 5; // EjsS Model.Variables.lookang.xmax
    ymin = -5; // EjsS Model.Variables.lookang.ymin
    ymax = 5; // EjsS Model.Variables.lookang.ymax
    text = "double click to play"; // EjsS Model.Variables.lookang.text
    text1 = "ϕ = "+ _view._format(Vnet,"0")+ " J/kg ,"+"|g| = "+ _view._format(Enet,"0.00")+ " m/s^2 ,"+"t = "+ _view._format(t,"0.00")+ " units "; // EjsS Model.Variables.lookang.text1
    radius = 0.5; // EjsS Model.Variables.lookang.radius
    selectedn = new Array(1); // EjsS Model.Variables.lookang.selectedn
    (function () {
      var _i0;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.lookang.selectedn
        selectedn[_i0] = "1";  // EjsS Model.Variables.lookang.selectedn
      }
    }());
    selectednVectors = new Array(1); // EjsS Model.Variables.lookang.selectednVectors
    (function () {
      var _i0;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.lookang.selectednVectors
        selectednVectors[_i0] = "15";  // EjsS Model.Variables.lookang.selectednVectors
      }
    }());
    selected = new Array(1); // EjsS Model.Variables.lookang.selected
    (function () {
      var _i0;
      for (_i0=0; _i0<1; _i0+=1) {  // EjsS Model.Variables.lookang.selected
        selected[_i0] = "very_outer_space";  // EjsS Model.Variables.lookang.selected
      }
    }());
  });

  _model.addToReset(function() {
    redness = 220; // EjsS Model.Variables.color variables.redness
    greenness = 220; // EjsS Model.Variables.color variables.greenness
    blueness = 220; // EjsS Model.Variables.color variables.blueness
    colorball = new Array(nMax); // EjsS Model.Variables.color variables.colorball
    (function () {
      var _i0;
      for (_i0=0; _i0<nMax; _i0+=1) {  // EjsS Model.Variables.color variables.colorball
        colorball[_i0] = "rgba("+redness+","+greenness+","+blueness+",0)";  // EjsS Model.Variables.color variables.colorball
      }
    }());
    colorballtext = new Array(nMax); // EjsS Model.Variables.color variables.colorballtext
    (function () {
      var _i0;
      for (_i0=0; _i0<nMax; _i0+=1) {  // EjsS Model.Variables.color variables.colorballtext
        colorballtext[_i0] = "rgba("+redness+","+greenness+","+blueness+",0)";  // EjsS Model.Variables.color variables.colorballtext
      }
    }());
    colorVectors = new Array(nVectorsSq); // EjsS Model.Variables.color variables.colorVectors
    (function () {
      var _i0;
      for (_i0=0; _i0<nVectorsSq; _i0+=1) {  // EjsS Model.Variables.color variables.colorVectors
        colorVectors[_i0] = "";  // EjsS Model.Variables.color variables.colorVectors
      }
    }());
    backColor = ""; // EjsS Model.Variables.color variables.backColor
  });

  _model.addToReset(function() {
    Android = /Android|android/i.test(navigator.userAgent); // EjsS Model.Variables.layout.Android
    iPhone = /iPhone|iPod/.test(navigator.userAgent) && !window.MSStream; // EjsS Model.Variables.layout.iPhone
    iPad = /iPad/.test(navigator.userAgent) && !window.MSStream; // EjsS Model.Variables.layout.iPad
    iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream; // EjsS Model.Variables.layout.iOS
    isAndroid = checkAndroid(); // EjsS Model.Variables.layout.isAndroid
    Width = (_isEPub)?"400":"100%"; // EjsS Model.Variables.layout.Width
    Height = (_isEPub)?"500":"100%"; // EjsS Model.Variables.layout.Height
    Width1 = "100%"; // EjsS Model.Variables.layout.Width1
    vvst = true; // EjsS Model.Variables.layout.vvst
  });

  if (_inputParameters) {
    _inputParameters = _model.parseInputParameters(_inputParameters);
    if (_inputParameters) _model.addToReset(function() { _model._readParameters(_inputParameters); });
  }

  _model.addToReset(function() {
    _privateOdesList=[];
    _ODEi_evolution1 = _ODE_evolution1();
    _privateOdesList.push(_ODEi_evolution1);
  });

  _model.addToReset(function() {
    _model.setAutoplay(false);
    _model.setPauseOnPageExit(true);
    _model.setFPS(20);
    _model.setStepsPerDisplay(20);
  });

  function rgb(r, g, b){  // > CustomCode.rgb:1
    return "rgb("+r+","+g+","+b+")";  // > CustomCode.rgb:2
  }  // > CustomCode.rgb:3

  function computeField () {  // > CustomCode.computeField:1
  Enetx = 0.0;  // > CustomCode.computeField:2
  Enety = 0.0;  // > CustomCode.computeField:3
  Vnet = 0.0;  // > CustomCode.computeField:4
  for (i = 0; i < n; i++)  // > CustomCode.computeField:5
  {  // > CustomCode.computeField:6
  rSquared=(x[i]-xtest)*(x[i]-xtest)+(y[i]-ytest)*(y[i]-ytest);  // > CustomCode.computeField:7
  Ex[i]=k*q[i]*(xtest-x[i])/(rSquared*Math.sqrt(rSquared));  // > CustomCode.computeField:8
  Ey[i]=k*q[i]*(ytest-y[i])/(rSquared*Math.sqrt(rSquared));  // > CustomCode.computeField:9
  Enetx = Enetx + Ex[i];  // > CustomCode.computeField:10
  Enety = Enety + Ey[i];  // > CustomCode.computeField:11
  Vnet = Vnet + k*q[i]/(Math.sqrt(rSquared));  // > CustomCode.computeField:12
  }  // > CustomCode.computeField:13
  Enet = Math.sqrt(Enetx*Enetx+Enety*Enety);  // > CustomCode.computeField:14
  }  // > CustomCode.computeField:15

  function make () {   // > CustomCode.make:1
  var dx = (xmax-xmin)/(nVectors-1);  // > CustomCode.make:2
  var dy = (ymax-ymin)/(nVectors-1);  // > CustomCode.make:3
  //draw outside unused arrays lookang  // > CustomCode.make:4
  for (i = 0; i < nVectorsMax+1; i++)  // > CustomCode.make:5
  {  // > CustomCode.make:6
    for (j = 0; j < nVectorsMax+1; j++)  // > CustomCode.make:7
    {  // > CustomCode.make:8
     vectorIndex = i+nVectors*j;  // > CustomCode.make:9
       // > CustomCode.make:10
     posx[vectorIndex]=xmin-2*dx;  // > CustomCode.make:11
      posy[vectorIndex]=ymin-2*dy; //put far away  // > CustomCode.make:12
           // > CustomCode.make:13
    }  // > CustomCode.make:14
  }  // > CustomCode.make:15
  }  // > CustomCode.make:16

  //https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Using_full_screen_mode  // > CustomCode.fullscreen:1
  // does not work for iOS   // > CustomCode.fullscreen:2
  /*jslint browser:true */  // > CustomCode.fullscreen:3
  function toggleFullScreen() {  // > CustomCode.fullscreen:4
    if (!document.fullscreenElement &&    // alternative standard method  // > CustomCode.fullscreen:5
        !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement ) {  // current working methods  // > CustomCode.fullscreen:6
      if (document.documentElement.requestFullscreen) {  // > CustomCode.fullscreen:7
        document.documentElement.requestFullscreen();  // > CustomCode.fullscreen:8
      } else if (document.documentElement.msRequestFullscreen) {  // > CustomCode.fullscreen:9
        document.documentElement.msRequestFullscreen();  // > CustomCode.fullscreen:10
      } else if (document.documentElement.mozRequestFullScreen) {  // > CustomCode.fullscreen:11
        document.documentElement.mozRequestFullScreen();  // > CustomCode.fullscreen:12
      } else if (document.documentElement.webkitRequestFullscreen) {  // > CustomCode.fullscreen:13
        document.documentElement.webkitRequestFullscreen();  // > CustomCode.fullscreen:14
      }  // > CustomCode.fullscreen:15
    } else {  // > CustomCode.fullscreen:16
      if (document.exitFullscreen) {  // > CustomCode.fullscreen:17
        document.exitFullscreen();  // > CustomCode.fullscreen:18
      } else if (document.msExitFullscreen) {  // > CustomCode.fullscreen:19
        document.msExitFullscreen();  // > CustomCode.fullscreen:20
      } else if (document.mozCancelFullScreen) {  // > CustomCode.fullscreen:21
        document.mozCancelFullScreen();  // > CustomCode.fullscreen:22
      } else if (document.webkitExitFullscreen) {  // > CustomCode.fullscreen:23
        document.webkitExitFullscreen();  // > CustomCode.fullscreen:24
      }  // > CustomCode.fullscreen:25
    }  // > CustomCode.fullscreen:26
  }  // > CustomCode.fullscreen:27

  //code reference: http://davidwalsh.name/detect-android  // > CustomCode.android:1
  function checkAndroid () {  // > CustomCode.android:2
    var ua = navigator.userAgent.toLowerCase();  // > CustomCode.android:3
    return ua.indexOf("android") > -1; //&& ua.indexOf("mobile");  // > CustomCode.android:4
  }  // > CustomCode.android:5

  _model.addToInitialization(function() {
    if (!__pagesEnabled["undefined"]) return;
    if (nVectors==undefined){  // > Initialization.undefined:1
      nVectors=15;  // > Initialization.undefined:2
      nVectorsSq=nVectors*nVectors;  // > Initialization.undefined:3
        // > Initialization.undefined:4
      }  // > Initialization.undefined:5
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["menu"]) return;
    var dx = (xmax-xmin)/(nVectors-1);  // > Initialization.menu:1
    var dy = (ymax-ymin)/(nVectors-1);  // > Initialization.menu:2
    //draw outside unused arrays lookang  // > Initialization.menu:3
    for (i = 0; i < nVectorsMax+1; i++)  // > Initialization.menu:4
    {  // > Initialization.menu:5
      for (j = 0; j < nVectorsMax+1; j++)  // > Initialization.menu:6
      {  // > Initialization.menu:7
       vectorIndex = i+nVectors*j;  // > Initialization.menu:8
         // > Initialization.menu:9
       posx[vectorIndex]=xmin-2*dx;  // > Initialization.menu:10
        posy[vectorIndex]=ymin-2*dy; //put far away  // > Initialization.menu:11
             // > Initialization.menu:12
      }  // > Initialization.menu:13
    }  // > Initialization.menu:14
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["Init Page"]) return;
    //nVectors = 15;  // > Initialization.Init Page:1
    //FieldFlag=true;  // > Initialization.Init Page:2
    var dx = (xmax-xmin)/(nVectors-1);  // > Initialization.Init Page:3
    var dy = (ymax-ymin)/(nVectors-1);  // > Initialization.Init Page:4
    for (i = 0; i < nVectors; i++)  // > Initialization.Init Page:5
    {  // > Initialization.Init Page:6
      for (j = 0; j < nVectors; j++)  // > Initialization.Init Page:7
      {  // > Initialization.Init Page:8
       vectorIndex = i+nVectors*j;  // > Initialization.Init Page:9
         // > Initialization.Init Page:10
       posx[vectorIndex]=xmin+dx*i;  // > Initialization.Init Page:11
        posy[vectorIndex]=ymin+dy*j;  // > Initialization.Init Page:12
       textpos[vectorIndex] = ""+vectorIndex;  // > Initialization.Init Page:13
        Vectorx[vectorIndex] = xmin+dx*i;  // > Initialization.Init Page:14
        Vectory[vectorIndex] = ymin+dy*j;  // > Initialization.Init Page:15
      }  // > Initialization.Init Page:16
    }  // > Initialization.Init Page:17
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["svg"]) return;
    var container = document.createElement('div');  // > Initialization.svg:1
    var svggradient = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1"><defs>'+  // > Initialization.svg:2
      '  <radialGradient id="mygrandient1" cx="50%" cy="50%" r="50%" fx="30%" fy="30%">'+  // > Initialization.svg:3
      '    <stop offset="0%" style="stop-color:rgb(0,0,0); stop-opacity:0.01" />'+  // > Initialization.svg:4
      '    <stop offset="100%" style="stop-color:rgb(215,0,0);stop-opacity:0.6" />'+  // > Initialization.svg:5
      '  </radialGradient>'+  // > Initialization.svg:6
      '</defs></svg>';  // > Initialization.svg:7
    container.innerHTML = svggradient;  // > Initialization.svg:8
    document.body.appendChild(container);  // > Initialization.svg:9
    //"url(#mygrandient1)"  // > Initialization.svg:10
    var container = document.createElement('div');  // > Initialization.svg:11
    var svggradient = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1"><defs>'+  // > Initialization.svg:12
      '  <radialGradient id="mygrandient2" cx="50%" cy="50%" r="50%" fx="80%" fy="80%">'+  // > Initialization.svg:13
      '    <stop offset="0%" style="stop-color:rgb(0,0,0); stop-opacity:0.2" />'+  // > Initialization.svg:14
      '    <stop offset="100%" style="stop-color:rgb(255,200,255);stop-opacity:1" />'+  // > Initialization.svg:15
      '  </radialGradient>'+  // > Initialization.svg:16
      '</defs></svg>';  // > Initialization.svg:17
    container.innerHTML = svggradient;  // > Initialization.svg:18
    document.body.appendChild(container);  // > Initialization.svg:19
    //"url(#mygrandient2)"  // > Initialization.svg:20
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["axes"]) return;
    _view.plottingPanel.getAxisX().setPosition([0,0.5]);  // > Initialization.axes:1
    _view.plottingPanel.getTitleX().setPosition([0.95,0.5]);  // > Initialization.axes:2
    _view.plottingPanel.getAxisY().setPosition([0.5,0]);  // > Initialization.axes:3
    _view.plottingPanel.getTitleY().setPosition([0.5,0.9]);  // > Initialization.axes:4
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["set0position"]) return;
    //x[0] = -0.0;  // > Initialization.set0position:1
    //y[0] = 0.0;  // > Initialization.set0position:2
    //x[1] = 10.0;  // > Initialization.set0position:3
    //y[1] = 10.0;  // > Initialization.set0position:4
    //x[2] = 10.0;  // > Initialization.set0position:5
    //y[2] = 10;  // > Initialization.set0position:6
    //x[3] = 10;  // > Initialization.set0position:7
    //y[3] = 10;  // > Initialization.set0position:8
    //x[4] = 10;  // > Initialization.set0position:9
    //y[4] = 10;  // > Initialization.set0position:10
    chargeLabel[0] = "1";  // > Initialization.set0position:11
    chargeLabel[1] = "2";  // > Initialization.set0position:12
    chargeLabel[2] = "3";  // > Initialization.set0position:13
    chargeLabel[3] = "4";  // > Initialization.set0position:14
    chargeLabel[4] = "5";  // > Initialization.set0position:15
    for (i = 0; i < nMax; i++ )  // > Initialization.set0position:16
    {  // > Initialization.set0position:17
      q[i] = 6.0;  // > Initialization.set0position:18
    }  // > Initialization.set0position:19
  });

  _model.addToInitialization(function() {
    if (!__pagesEnabled["initialisetestcharge"]) return;
    xtest=xtest0;  // > Initialization.initialisetestcharge:1
    ytest=ytest0;  // > Initialization.initialisetestcharge:2
    vxtest=vxtest0;  // > Initialization.initialisetestcharge:3
    vytest=vytest0;  // > Initialization.initialisetestcharge:4
    t=0;  // > Initialization.initialisetestcharge:5
  });

  _model.addToInitialization(function() {
    _initializeSolvers();
  });

  _model.addToEvolution(function() {
    if (!__pagesEnabled["Evol Page"]) return;
    _ODEi_evolution1.step();
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["sync sliders"]) return;
    q[0] = q0;  // > FixedRelations.sync sliders:1
    q[1] = q1;  // > FixedRelations.sync sliders:2
    q[2] = q2;  // > FixedRelations.sync sliders:3
    q[3] = q3;  // > FixedRelations.sync sliders:4
    q[4] = q4;  // > FixedRelations.sync sliders:5
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["field vectors"]) return;
    // Field for the vectors  // > FixedRelations.field vectors:1
    for (i = 0; i < nVectors; i++)  // > FixedRelations.field vectors:2
    {  // > FixedRelations.field vectors:3
      for (j = 0; j < nVectors; j++)  // > FixedRelations.field vectors:4
      {  // > FixedRelations.field vectors:5
        vectorIndex = i+nVectors*j;  // > FixedRelations.field vectors:6
        Fieldx[vectorIndex] = 0.0; //initialise to zero  // > FixedRelations.field vectors:7
        Fieldy[vectorIndex] = 0.0;  // > FixedRelations.field vectors:8
      }  // > FixedRelations.field vectors:9
    }  // > FixedRelations.field vectors:10
    for (i2 = 0; i2 < n; i2++)  // > FixedRelations.field vectors:11
    {  // > FixedRelations.field vectors:12
      for (i = 0; i < nVectors; i++)  // > FixedRelations.field vectors:13
      {  // > FixedRelations.field vectors:14
        for (j = 0; j < nVectors; j++)  // > FixedRelations.field vectors:15
        {  // > FixedRelations.field vectors:16
          vectorIndex = i+nVectors*j;  // > FixedRelations.field vectors:17
          rSquared=(x[i2]-Vectorx[vectorIndex])*(x[i2]-Vectorx[vectorIndex])+(y[i2]-Vectory[vectorIndex])*(y[i2]-Vectory[vectorIndex]);  // > FixedRelations.field vectors:18
          Fieldx[vectorIndex]=Fieldx[vectorIndex]+k*q[i2]*(Vectorx[vectorIndex]-x[i2])/(rSquared*Math.sqrt(rSquared)); //compute field vectors  // > FixedRelations.field vectors:19
          Fieldy[vectorIndex]=Fieldy[vectorIndex]+k*q[i2]*(Vectory[vectorIndex]-y[i2])/(rSquared*Math.sqrt(rSquared));  // > FixedRelations.field vectors:20
        }  // > FixedRelations.field vectors:21
      }  // > FixedRelations.field vectors:22
    }  // > FixedRelations.field vectors:23
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["field vectors limit length"]) return;
    for (i = 0; i < nVectors; i++)  // > FixedRelations.field vectors limit length:1
    {  // > FixedRelations.field vectors limit length:2
      for (j = 0; j < nVectors; j++)  // > FixedRelations.field vectors limit length:3
      {  // > FixedRelations.field vectors limit length:4
        vectorIndex = i+nVectors*j;  // > FixedRelations.field vectors limit length:5
        Fieldmag=Math.sqrt(Fieldx[vectorIndex]*Fieldx[vectorIndex]+Fieldy[vectorIndex]*Fieldy[vectorIndex]);  // > FixedRelations.field vectors limit length:6
        if (Fieldmag > 0.0)  // > FixedRelations.field vectors limit length:7
         {  // > FixedRelations.field vectors limit length:8
           Fieldx[vectorIndex]=1.0*Fieldx[vectorIndex]/Fieldmag;  // > FixedRelations.field vectors limit length:9
          Fieldy[vectorIndex]=1.0*Fieldy[vectorIndex]/Fieldmag;  // > FixedRelations.field vectors limit length:10
        //    Fieldx[vectorIndex]=3*Fieldx[vectorIndex]/Fieldmag;  // > FixedRelations.field vectors limit length:11
        //   Fieldy[vectorIndex]=3*Fieldy[vectorIndex]/Fieldmag;  // > FixedRelations.field vectors limit length:12
         }  // > FixedRelations.field vectors limit length:13
     //   posx[vectorIndex]=Vectorx[vectorIndex]-0.5*Fieldx[vectorIndex];  // > FixedRelations.field vectors limit length:14
     //   posy[vectorIndex]=Vectory[vectorIndex]-0.5*Fieldy[vectorIndex];  // > FixedRelations.field vectors limit length:15
      //  posx[vectorIndex]=Vectorx[vectorIndex];  // > FixedRelations.field vectors limit length:16
      //  posy[vectorIndex]=Vectory[vectorIndex];  // > FixedRelations.field vectors limit length:17
        Fieldmag=Math.min(10000,Fieldmag);  // > FixedRelations.field vectors limit length:18
     // redness=255-(int)(255*Fieldmag/10000);  // > FixedRelations.field vectors limit length:19
     //   colorVectors[vectorIndex]= function(redness,redness,redness);  // > FixedRelations.field vectors limit length:20
      }  // > FixedRelations.field vectors limit length:21
    }  // > FixedRelations.field vectors limit length:22
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["charges setup"]) return;
    // Setting the colors (red for +, blue for -)  // > FixedRelations.charges setup:1
    for (i = 0; i < n; i++)  // > FixedRelations.charges setup:2
    {  // > FixedRelations.charges setup:3
      if (q[i] > 0.0)  // > FixedRelations.charges setup:4
      {  // > FixedRelations.charges setup:5
      redness = 250;  // > FixedRelations.charges setup:6
     greenness = 0;  // > FixedRelations.charges setup:7
      blueness = 0;  // > FixedRelations.charges setup:8
      colorball[i] = "rgba("+redness+","+greenness+","+blueness+",1.0)";  // > FixedRelations.charges setup:9
      colorballtext[i]="rgba(0,0,0,1.0)";  // > FixedRelations.charges setup:10
      }  // > FixedRelations.charges setup:11
      else  // > FixedRelations.charges setup:12
      {  // > FixedRelations.charges setup:13
        if (q[i] < 0.0)  // > FixedRelations.charges setup:14
        {  // > FixedRelations.charges setup:15
        redness = 0;  // > FixedRelations.charges setup:16
        greenness = 0;  // > FixedRelations.charges setup:17
        blueness = 250;  // > FixedRelations.charges setup:18
     colorball[i] = "rgba("+redness+","+greenness+","+blueness+",1.0)";  // > FixedRelations.charges setup:19
     colorballtext[i]="rgba(255,255,255,1.0)";  // > FixedRelations.charges setup:20
        }  // > FixedRelations.charges setup:21
        else  // > FixedRelations.charges setup:22
        {  // > FixedRelations.charges setup:23
      //  redness = 200;  // > FixedRelations.charges setup:24
       // greenness = 200;  // > FixedRelations.charges setup:25
       // blueness = 200;  // > FixedRelations.charges setup:26
     colorball[i] = "rgba("+redness+","+greenness+","+blueness+",0)";  // > FixedRelations.charges setup:27
     colorballtext[i]="rgba("+redness+","+greenness+","+blueness+",0)";  // > FixedRelations.charges setup:28
        }    // > FixedRelations.charges setup:29
      }  // > FixedRelations.charges setup:30
    }  // > FixedRelations.charges setup:31
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["limit"]) return;
    //pauses program when test charge moves out of screen  // > FixedRelations.limit:1
    if ((xtest >= xmax*2)|| (xtest<=xmin*2) )    // > FixedRelations.limit:2
    {    // > FixedRelations.limit:3
      _pause();  // > FixedRelations.limit:4
      }  // > FixedRelations.limit:5
        // > FixedRelations.limit:6
        // > FixedRelations.limit:7
    if ((ytest >= ymax)|| (ytest<=ymin) )   // > FixedRelations.limit:8
    {   // > FixedRelations.limit:9
      _pause();  // > FixedRelations.limit:10
      }  // > FixedRelations.limit:11
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["labeltext"]) return;
    chargeLabel[0] = "Q₁="+_view._format(q[0],"0")+"C";  // > FixedRelations.labeltext:1
    chargeLabel[1] = "Q₂="+_view._format(q[1],"0")+"C";  // > FixedRelations.labeltext:2
    chargeLabel[2] = "Q₃="+_view._format(q[2],"0")+"C";  // > FixedRelations.labeltext:3
    chargeLabel[3] = "Q₄="+_view._format(q[3],"0")+"C";  // > FixedRelations.labeltext:4
    chargeLabel[4] = "Q₅="+_view._format(q[4],"0")+"C";  // > FixedRelations.labeltext:5
  });

  _model.addToFixedRelations(function() {
    if (!__pagesEnabled["lookang"]) return;
    if (_isMobile == true) { text1 = ""}   // > FixedRelations.lookang:1
    else { text1="V = "+ _view._format(Vnet,"0")+ " J/kg ,"+"|E| = "+ _view._format(Enet,"0.00")+ " N/C ,"+"t = "+ _view._format(t,"0.00")+ " units ";}  // > FixedRelations.lookang:2
  });

  _model.addToFixedRelations(function() { _isPaused = _model.isPaused(); _isPlaying = _model.isPlaying(); });

  function _initializeSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].initializeSolver();
  }

  function _automaticResetSolvers() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].automaticResetSolver();
  }

  _model.resetSolvers = function() {
    for (var i=0,n=_privateOdesList.length; i<n; i++) _privateOdesList[i].resetSolver();
  };

  _getODE = function (_odeName) {
    if (_odeName=="Evol Page") return _ODEi_evolution1;
    return null;
  }

  function _getEventSolver(_odeName) {
    var ode = _getODE(_odeName);
    if (ode===null) return null;
    return ode.getEventSolver();
  }

  function _setSolverClass(_odeName, _engine) {
    var ode = _getODE(_odeName);
    if (ode===null) return;
    if (!_engine.setODE) {
      var classname = _engine.toLowerCase();
      if      (classname.indexOf("boga")>=0)   _engine = EJSS_ODE_SOLVERS.bogackiShampine23;
      else if (classname.indexOf("cash")>=0)   _engine = EJSS_ODE_SOLVERS.cashKarp45;
      else if (classname.indexOf("dopri5")>=0) _engine = EJSS_ODE_SOLVERS.dopri5;
      else if (classname.indexOf("dopri8")>=0) _engine = EJSS_ODE_SOLVERS.dopri853;
      else if (classname.indexOf("richa")>=0)  _engine = EJSS_ODE_SOLVERS.eulerRichardson;
      else if (classname.indexOf("euler")>=0)  _engine = EJSS_ODE_SOLVERS.euler;
      else if (classname.indexOf("fehlberg87")>=0) _engine = EJSS_ODE_SOLVERS.fehlberg87;
      else if (classname.indexOf("fehlberg8")>=0)  _engine = EJSS_ODE_SOLVERS.fehlberg8;
      else if (classname.indexOf("radau")>=0)   _engine = EJSS_ODE_SOLVERS.radau5;
      else if (classname.indexOf("runge")>=0)  _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("rk4")>=0)    _engine = EJSS_ODE_SOLVERS.rungeKutta4;
      else if (classname.indexOf("verlet")>=0) _engine = EJSS_ODE_SOLVERS.velocityVerlet;
    }
    if (_engine) ode.setSolverClass(_engine);
  }

  function _ODE_evolution1() {
    var __odeSelf = {};
    var __eventSolver;
    var __solverClass = EJSS_ODE_SOLVERS.rungeKutta4;
    var __state=[];
    var _ODE_evolution1_Event1;
    var _ODE_evolution1_Event2;
    var _ODE_evolution1_Event3;
    var _ODE_evolution1_Event4;
    var _ODE_evolution1_Event5;
    var __ignoreErrors=false;
    var __mustInitialize=true;
    var __isEnabled=true;
    var __mustUserReinitialize=false;
    var __mustReinitialize=true;


    __odeSelf._getOdeVars = function (){ return["xtest","ytest","vxtest","vytest","t"]};

    __odeSelf.setSolverClass = function(__aSolverClass) {
      __solverClass = __aSolverClass;
      __instantiateSolver();
    };

    function __instantiateSolver() {
      __state=[];
      __pushState();
      __eventSolver = EJSS_ODE_SOLVERS.interpolatorEventSolver(__solverClass(),__odeSelf);
      __mustInitialize = true;
    }

    __odeSelf.setEnabled = function(_enabled) { __isEnabled = _enabled; };

    __odeSelf.getIndependentVariableValue = function() { return __eventSolver.getIndependentVariableValue(); };

    __odeSelf.getInternalStepSize = function() { return __eventSolver.getInternalStepSize(); };

    __odeSelf.isAccelerationIndependentOfVelocity = function() { return false; };

    __odeSelf.initializeSolver = function() {
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); return; }
      __pushState();
      __eventSolver.initialize(dt);
      __eventSolver.setBestInterpolation(false);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.removeAllEvents();
      if (__pagesEnabled["Event"]) __eventSolver.addEvent(_ODE_evolution1_Event1());
      if (__pagesEnabled["Event 2"]) __eventSolver.addEvent(_ODE_evolution1_Event2());
      if (__pagesEnabled["Event 2 2"]) __eventSolver.addEvent(_ODE_evolution1_Event3());
      if (__pagesEnabled["Event 2 2 2"]) __eventSolver.addEvent(_ODE_evolution1_Event4());
      if (__pagesEnabled["Event 2 2 2 2"]) __eventSolver.addEvent(_ODE_evolution1_Event5());
      for(k in userEvents1){__eventSolver.addEvent(userEvents1[k]);}
      __eventSolver.setEstimateFirstStep(false);
      __eventSolver.setEnableExceptions(false);
      __eventSolver.setTolerances(0.00001,0.00001);
      __mustReinitialize = true;
      __mustInitialize = false;
    };

    function __pushState() {
      // Copy our variables to __state[]
        var __j=0;
        var __n=0;
        var __cIn=0;
        if (__state[__cIn]!=xtest) __mustReinitialize = true;
        __state[__cIn++] = xtest;
        if (__state[__cIn]!=ytest) __mustReinitialize = true;
        __state[__cIn++] = ytest;
        if (__state[__cIn]!=vxtest) __mustReinitialize = true;
        __state[__cIn++] = vxtest;
        if (__state[__cIn]!=vytest) __mustReinitialize = true;
        __state[__cIn++] = vytest;
        if (__state[__cIn]!=t) __mustReinitialize = true;
        __state[__cIn++] = t;
    }

    function __arraysChanged () {
      return false;
    }

    __odeSelf.getEventSolver = function() {
      return __eventSolver;
    };

    __odeSelf.resetSolver = function() {
      __mustUserReinitialize = true;
    };

    __odeSelf.automaticResetSolver = function() {
      __mustReinitialize = true;
    };

    function __errorAction () {
      if (__ignoreErrors) return;
      console.log (__eventSolver.getErrorMessage());
      _pause();
      // Make sure the solver is reinitialized;
      __mustReinitialize = true;
    }

    __odeSelf.step = function() { return __privateStep(false); };

    __odeSelf.solverStep = function() { return __privateStep(true); };

    function __privateStep(__takeMaximumStep) {
      if (!__isEnabled) return 0;
      if (dt===0) return 0;
      if (__mustInitialize) __odeSelf.initializeSolver();
      if (__arraysChanged()) { __instantiateSolver(); __odeSelf.initializeSolver(); }
      __eventSolver.setStepSize(dt);
      __eventSolver.setInternalStepSize(dt);
      __eventSolver.setMaximumInternalSteps(10000);
      __eventSolver.setTolerances(0.00001,0.00001);
      __pushState();
      if (__mustUserReinitialize) {
        __eventSolver.userReinitialize();
        __mustUserReinitialize = false;
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      else if (__mustReinitialize) {
        __eventSolver.reinitialize();
        __mustReinitialize = false;
        if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      }
      var __stepTaken = __takeMaximumStep ? __eventSolver.maxStep() : __eventSolver.step();
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        xtest = __state[__cOut++];
        ytest = __state[__cOut++];
        vxtest = __state[__cOut++];
        vytest = __state[__cOut++];
        t = __state[__cOut++];
      // Check for error
      if (__eventSolver.getErrorCode()!=EJSS_ODE_SOLVERS.ERROR.NO_ERROR) __errorAction();
      return __stepTaken;
    }

    __odeSelf.getState = function() { return __state; };

    __odeSelf.getRate = function(_aState,_aRate) {
      _aRate[_aRate.length-1] = 0.0; // In case the prelim code returns
      var __index=-1; // so that it can be used in preliminary code
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var xtest = _aState[__cOut++];
        var ytest = _aState[__cOut++];
        var vxtest = _aState[__cOut++];
        var vytest = _aState[__cOut++];
        var t = _aState[__cOut++];
      // Preliminary code: Code to be executed before rate equations are evaluated
        computeField ();  // > Preliminary code for ODE.Evol Page:1
      // Compute the rate
        var __cRate=0;
        _aRate[__cRate++] = vxtest; // Rate for ODE: Evol Page:xtest
        _aRate[__cRate++] = vytest; // Rate for ODE: Evol Page:ytest
        _aRate[__cRate++] = Enetx; // Rate for ODE: Evol Page:vxtest
        _aRate[__cRate++] = Enety; // Rate for ODE: Evol Page:vytest
        _aRate[__cRate++] = 1; // independent variable
        return _aRate;
    }; //end of getRate

    __odeSelf._addEvent = function(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent){
    var User_Event = function (userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent) {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return eventType; };

      _eventSelf.getRootFindingMethod = function() { return eventMethod; };

      _eventSelf.getMaxIterations = function() { return maxIter; };

      _eventSelf.getTolerance = function() { return eventTolerance; };

      _eventSelf.evaluate = function(_aState) {
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var xtest = _aState[__cOut++];
        var ytest = _aState[__cOut++];
        var vxtest = _aState[__cOut++];
        var vytest = _aState[__cOut++];
        var t = _aState[__cOut++];
      return eval(userCondition);
      };

      _eventSelf.action = function() {
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        xtest = __state[__cOut++];
        ytest = __state[__cOut++];
        vxtest = __state[__cOut++];
        vytest = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[]
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = xtest;
        __state[__cIn++] = ytest;
        __state[__cIn++] = vxtest;
        __state[__cIn++] = vytest;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        if (undefined != functions) eval(functions.toString());
        eval(userAction);
        return endAtEvent;
      }

      return _eventSelf;
    }; // End of event

   userEvents1.push(User_Event(userCondition,userAction,eventType,eventMethod,maxIter,eventTolerance,endAtEvent));
   }

    _ODE_evolution1_Event1 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) {
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var xtest = _aState[__cOut++];
        var ytest = _aState[__cOut++];
        var vxtest = _aState[__cOut++];
        var vytest = _aState[__cOut++];
        var t = _aState[__cOut++];
        return Math.sqrt(Math.pow(x[0]-xtest, 2) + Math.pow(y[0]-ytest, 2))-radius;  // > Event zero-condition for page Evol Page:1
      };

      _eventSelf.action = function() {
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        xtest = __state[__cOut++];
        ytest = __state[__cOut++];
        vxtest = __state[__cOut++];
        vytest = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[]
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = xtest;
        __state[__cIn++] = ytest;
        __state[__cIn++] = vxtest;
        __state[__cIn++] = vytest;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        text="paused";  // > Event action for page Evol Page:1
        _pause();  // > Event action for page Evol Page:2
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution1_Event2 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) {
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var xtest = _aState[__cOut++];
        var ytest = _aState[__cOut++];
        var vxtest = _aState[__cOut++];
        var vytest = _aState[__cOut++];
        var t = _aState[__cOut++];
        return Math.sqrt(Math.pow(x[1]-xtest, 2) + Math.pow(y[1]-ytest, 2))-radius;  // > Event zero-condition for page Evol Page:1
      };

      _eventSelf.action = function() {
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        xtest = __state[__cOut++];
        ytest = __state[__cOut++];
        vxtest = __state[__cOut++];
        vytest = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[]
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = xtest;
        __state[__cIn++] = ytest;
        __state[__cIn++] = vxtest;
        __state[__cIn++] = vytest;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        text="paused";  // > Event action for page Evol Page:1
        _pause();  // > Event action for page Evol Page:2
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution1_Event3 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) {
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var xtest = _aState[__cOut++];
        var ytest = _aState[__cOut++];
        var vxtest = _aState[__cOut++];
        var vytest = _aState[__cOut++];
        var t = _aState[__cOut++];
        return Math.sqrt(Math.pow(x[2]-xtest, 2) + Math.pow(y[2]-ytest, 2))-radius;  // > Event zero-condition for page Evol Page:1
      };

      _eventSelf.action = function() {
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        xtest = __state[__cOut++];
        ytest = __state[__cOut++];
        vxtest = __state[__cOut++];
        vytest = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[]
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = xtest;
        __state[__cIn++] = ytest;
        __state[__cIn++] = vxtest;
        __state[__cIn++] = vytest;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        text="paused";  // > Event action for page Evol Page:1
        _pause();  // > Event action for page Evol Page:2
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution1_Event4 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) {
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var xtest = _aState[__cOut++];
        var ytest = _aState[__cOut++];
        var vxtest = _aState[__cOut++];
        var vytest = _aState[__cOut++];
        var t = _aState[__cOut++];
        return Math.sqrt(Math.pow(x[3]-xtest, 2) + Math.pow(y[3]-ytest, 2))-radius;  // > Event zero-condition for page Evol Page:1
      };

      _eventSelf.action = function() {
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        xtest = __state[__cOut++];
        ytest = __state[__cOut++];
        vxtest = __state[__cOut++];
        vytest = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[]
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = xtest;
        __state[__cIn++] = ytest;
        __state[__cIn++] = vxtest;
        __state[__cIn++] = vytest;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        text="paused";  // > Event action for page Evol Page:1
        _pause();  // > Event action for page Evol Page:2
        return true;
      }

      return _eventSelf;
    }; // End of event

    _ODE_evolution1_Event5 = function() {
      var _eventSelf = {};

      _eventSelf.getTypeOfEvent = function() { return EJSS_ODE_SOLVERS.EVENT_TYPE.CROSSING_EVENT; };

      _eventSelf.getRootFindingMethod = function() { return EJSS_ODE_SOLVERS.EVENT_METHOD.BISECTION; };

      _eventSelf.getMaxIterations = function() { return 100; };

      _eventSelf.getTolerance = function() { return 1.0e-5; };

      _eventSelf.evaluate = function(_aState) {
      // Extract our variables from _aState
        var __i=0;
        var __cOut=0;
        var xtest = _aState[__cOut++];
        var ytest = _aState[__cOut++];
        var vxtest = _aState[__cOut++];
        var vytest = _aState[__cOut++];
        var t = _aState[__cOut++];
        return Math.sqrt(Math.pow(x[4]-xtest, 2) + Math.pow(y[4]-ytest, 2))-radius;  // > Event zero-condition for page Evol Page:1
      };

      _eventSelf.action = function() {
      // Extract our variables from __state
        var __i=0;
        var __cOut=0;
        xtest = __state[__cOut++];
        ytest = __state[__cOut++];
        vxtest = __state[__cOut++];
        vytest = __state[__cOut++];
        t = __state[__cOut++];
        var _returnValue = __userDefinedAction();
      // Copy our variables to __state[]
        var __j=0;
        var __n=0;
        var __cIn=0;
        __state[__cIn++] = xtest;
        __state[__cIn++] = ytest;
        __state[__cIn++] = vxtest;
        __state[__cIn++] = vytest;
        __state[__cIn++] = t;
        return _returnValue;
      };

      function __userDefinedAction() {
        text="paused";  // > Event action for page Evol Page:1
        _pause();  // > Event action for page Evol Page:2
        return true;
      }

      return _eventSelf;
    }; // End of event

    __instantiateSolver();

    return __odeSelf;
  }

  function _historic_xtest(__time) {
    var __index = 0;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_ytest(__time) {
    var __index = 0 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_vxtest(__time) {
    var __index = 0 + 1 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

  function _historic_vytest(__time) {
    var __index = 0 + 1 + 1 + 1;
    return _ODEi_evolution1.getEventSolver().getStateHistory().interpolate(__time,__index);
  }

    _model._fontResized = function(iBase,iSize,iDelta) {
      _view._fontResized(iBase,iSize,iDelta);
  }; // end of _fontResized

  function _getViews() {
    var _viewsInfo = [];
    var _counter = 0;
    _viewsInfo[_counter++] = { name : "HtmlView Page", width : 800, height : 600 };
    return _viewsInfo;
  } // end of _getViews

  function _selectView(_viewNumber) {
    _view = null;
    _view = new electricfieldwee_View(_topFrame,_viewNumber,_libraryPath,_codebasePath);
    var _view_super_reset = _view._reset;
    _view._reset = function() {
      _view_super_reset();
      switch(_viewNumber) {
        case -10 : break; // make Lint happy
        default :
        case 0:
          _view.full.linkProperty("Height",  function() { return Height; }, function(_v) { Height = _v; } ); // HtmlView Page linking property 'Height' for element 'full'
          _view.full.linkProperty("Width",  function() { return Width; }, function(_v) { Width = _v; } ); // HtmlView Page linking property 'Width' for element 'full'
          _view.plottingPanel.linkProperty("Width",  function() { return Width1; }, function(_v) { Width1 = _v; } ); // HtmlView Page linking property 'Width' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("XFixedTick",  function() { return xmax; }, function(_v) { xmax = _v; } ); // HtmlView Page linking property 'XFixedTick' for element 'plottingPanel'
          _view.plottingPanel.setAction("OnDoubleClick", function(_data,_info) {
  toggleFullScreen();
  if (_isPaused == true) {_play();}

}); // HtmlView Page setting action 'OnDoubleClick' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("YFixedTick",  function() { return ymax; }, function(_v) { ymax = _v; } ); // HtmlView Page linking property 'YFixedTick' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("TRMessage",  function() { return print?"":"Charge Field in Two Dimensions Model"; } ); // HtmlView Page linking property 'TRMessage' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("TLMessage",  function() { return print?"":text; } ); // HtmlView Page linking property 'TLMessage' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MaximumY",  function() { return ymax; }, function(_v) { ymax = _v; } ); // HtmlView Page linking property 'MaximumY' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MaximumX",  function() { return xmax; }, function(_v) { xmax = _v; } ); // HtmlView Page linking property 'MaximumX' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MinimumX",  function() { return xmin; }, function(_v) { xmin = _v; } ); // HtmlView Page linking property 'MinimumX' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("MinimumY",  function() { return ymin; }, function(_v) { ymin = _v; } ); // HtmlView Page linking property 'MinimumY' for element 'plottingPanel'
          _view.plottingPanel.linkProperty("BRMessage",  function() { return print?"":text1; } ); // HtmlView Page linking property 'BRMessage' for element 'plottingPanel'
          _view.fieldpoint.linkProperty("NumberOfElements",  function() { return nVectorsSq; }, function(_v) { nVectorsSq = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'fieldpoint'
          _view.fieldpoint.linkProperty("X",  function() { return posx; }, function(_v) { posx = _v; } ); // HtmlView Page linking property 'X' for element 'fieldpoint'
          _view.fieldpoint.linkProperty("Y",  function() { return posy; }, function(_v) { posy = _v; } ); // HtmlView Page linking property 'Y' for element 'fieldpoint'
          _view.fieldpoint.linkProperty("Visibility",  function() { return FieldFlag; }, function(_v) { FieldFlag = _v; } ); // HtmlView Page linking property 'Visibility' for element 'fieldpoint'
          _view.arrowSet.linkProperty("NumberOfElements",  function() { return nVectorsSq; }, function(_v) { nVectorsSq = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'arrowSet'
          _view.arrowSet.linkProperty("SizeX",  function() { return Fieldx; }, function(_v) { Fieldx = _v; } ); // HtmlView Page linking property 'SizeX' for element 'arrowSet'
          _view.arrowSet.linkProperty("X",  function() { return posx; }, function(_v) { posx = _v; } ); // HtmlView Page linking property 'X' for element 'arrowSet'
          _view.arrowSet.linkProperty("Y",  function() { return posy; }, function(_v) { posy = _v; } ); // HtmlView Page linking property 'Y' for element 'arrowSet'
          _view.arrowSet.linkProperty("Visibility",  function() { return FieldFlag; }, function(_v) { FieldFlag = _v; } ); // HtmlView Page linking property 'Visibility' for element 'arrowSet'
          _view.arrowSet.linkProperty("SizeY",  function() { return Fieldy; }, function(_v) { Fieldy = _v; } ); // HtmlView Page linking property 'SizeY' for element 'arrowSet'
          _view.textSet2.linkProperty("NumberOfElements",  function() { return nVectorsSq; }, function(_v) { nVectorsSq = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'textSet2'
          _view.textSet2.linkProperty("X",  function() { return posx; }, function(_v) { posx = _v; } ); // HtmlView Page linking property 'X' for element 'textSet2'
          _view.textSet2.linkProperty("Y",  function() { return posy; }, function(_v) { posy = _v; } ); // HtmlView Page linking property 'Y' for element 'textSet2'
          _view.textSet2.linkProperty("Text",  function() { return textpos; }, function(_v) { textpos = _v; } ); // HtmlView Page linking property 'Text' for element 'textSet2'
          _view.trail.linkProperty("Active",  function() { return _isPlaying; } ); // HtmlView Page linking property 'Active' for element 'trail'
          _view.trail.linkProperty("Connected",  function() { return t>0; } ); // HtmlView Page linking property 'Connected' for element 'trail'
          _view.trail.linkProperty("InputX",  function() { return xtest; }, function(_v) { xtest = _v; } ); // HtmlView Page linking property 'InputX' for element 'trail'
          _view.trail.linkProperty("InputY",  function() { return ytest; }, function(_v) { ytest = _v; } ); // HtmlView Page linking property 'InputY' for element 'trail'
          _view.group.linkProperty("X",  function() { return x[0]; } ); // HtmlView Page linking property 'X' for element 'group'
          _view.group.linkProperty("Y",  function() { return y[0]; } ); // HtmlView Page linking property 'Y' for element 'group'
          _view.earth.linkProperty("NumberOfElements",  function() { return n; }, function(_v) { n = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'earth'
          _view.earth.setAction("OnRelease", function(_data,_info) {
  _view.trail.clear();

}); // HtmlView Page setting action 'OnRelease' for element 'earth'
          _view.earth.linkProperty("FillColor",  function() { return colorball; }, function(_v) { colorball = _v; } ); // HtmlView Page linking property 'FillColor' for element 'earth'
          _view.earth.linkProperty("SizeX",  function() { return radius*2; } ); // HtmlView Page linking property 'SizeX' for element 'earth'
          _view.earth.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'earth'
          _view.earth.setAction("OnEnter", function(_data,_info) {
  vxtest=0;
  vytest=0;

}); // HtmlView Page setting action 'OnEnter' for element 'earth'
          _view.earth.linkProperty("LineColor",  function() { return colorball; }, function(_v) { colorball = _v; } ); // HtmlView Page linking property 'LineColor' for element 'earth'
          _view.earth.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'earth'
          _view.earth.linkProperty("SizeY",  function() { return radius*2; } ); // HtmlView Page linking property 'SizeY' for element 'earth'
          _view.earth2.linkProperty("NumberOfElements",  function() { return n; }, function(_v) { n = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'earth2'
          _view.earth2.setAction("OnRelease", function(_data,_info) {
  _view.trail.clear();

}); // HtmlView Page setting action 'OnRelease' for element 'earth2'
          _view.earth2.linkProperty("SizeX",  function() { return radius*2; } ); // HtmlView Page linking property 'SizeX' for element 'earth2'
          _view.earth2.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'earth2'
          _view.earth2.setAction("OnEnter", function(_data,_info) {
  vxtest=0;
  vytest=0;

}); // HtmlView Page setting action 'OnEnter' for element 'earth2'
          _view.earth2.linkProperty("LineColor",  function() { return colorball; }, function(_v) { colorball = _v; } ); // HtmlView Page linking property 'LineColor' for element 'earth2'
          _view.earth2.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'earth2'
          _view.earth2.linkProperty("SizeY",  function() { return radius*2; } ); // HtmlView Page linking property 'SizeY' for element 'earth2'
          _view.earth2.setAction("OnDrag", function(_data,_info) {
  computeField ();

}); // HtmlView Page setting action 'OnDrag' for element 'earth2'
          _view.textSet.linkProperty("NumberOfElements",  function() { return n; }, function(_v) { n = _v; } ); // HtmlView Page linking property 'NumberOfElements' for element 'textSet'
          _view.textSet.linkProperty("FillColor",  function() { return colorballtext; }, function(_v) { colorballtext = _v; } ); // HtmlView Page linking property 'FillColor' for element 'textSet'
          _view.textSet.linkProperty("X",  function() { return x; }, function(_v) { x = _v; } ); // HtmlView Page linking property 'X' for element 'textSet'
          _view.textSet.linkProperty("Y",  function() { return y; }, function(_v) { y = _v; } ); // HtmlView Page linking property 'Y' for element 'textSet'
          _view.textSet.linkProperty("Text",  function() { return chargeLabel; }, function(_v) { chargeLabel = _v; } ); // HtmlView Page linking property 'Text' for element 'textSet'
          _view.velocity.linkProperty("SizeX",  function() { return vxtest; }, function(_v) { vxtest = _v; } ); // HtmlView Page linking property 'SizeX' for element 'velocity'
          _view.velocity.linkProperty("X",  function() { return xtest; }, function(_v) { xtest = _v; } ); // HtmlView Page linking property 'X' for element 'velocity'
          _view.velocity.linkProperty("Y",  function() { return ytest; }, function(_v) { ytest = _v; } ); // HtmlView Page linking property 'Y' for element 'velocity'
          _view.velocity.linkProperty("SizeY",  function() { return vytest; }, function(_v) { vytest = _v; } ); // HtmlView Page linking property 'SizeY' for element 'velocity'
          _view.velocity.setAction("OnDrag", function(_data,_info) {
  vxtest0=vxtest;
  vytest0=vytest;

}); // HtmlView Page setting action 'OnDrag' for element 'velocity'
          _view.test2.setAction("OnRelease", function(_data,_info) {
  //vxtest=0;
  //vytest=0;
  xtest0=xtest;
  ytest0=ytest;
  vxtest0=vxtest;
  vytest0=vytest;
  _view.trail.newSegment();

}); // HtmlView Page setting action 'OnRelease' for element 'test2'
          _view.test2.linkProperty("X",  function() { return xtest; }, function(_v) { xtest = _v; } ); // HtmlView Page linking property 'X' for element 'test2'
          _view.test2.linkProperty("Y",  function() { return ytest; }, function(_v) { ytest = _v; } ); // HtmlView Page linking property 'Y' for element 'test2'
          _view.test2.setAction("OnDrag", function(_data,_info) {
  xtest=Math.round(xtest);
  ytest=Math.round(ytest);
  computeField ();

}); // HtmlView Page setting action 'OnDrag' for element 'test2'
          _view.test.setAction("OnRelease", function(_data,_info) {
  //vxtest=0;
  //vytest=0;
  xtest0=xtest;
  ytest0=ytest;
  vxtest0=vxtest;
  vytest0=vytest;
  _view.trail.newSegment();

}); // HtmlView Page setting action 'OnRelease' for element 'test'
          _view.test.linkProperty("X",  function() { return xtest; }, function(_v) { xtest = _v; } ); // HtmlView Page linking property 'X' for element 'test'
          _view.test.linkProperty("Y",  function() { return ytest; }, function(_v) { ytest = _v; } ); // HtmlView Page linking property 'Y' for element 'test'
          _view.test.setAction("OnDrag", function(_data,_info) {
  //xtest=Math.round(xtest);
  //ytest=Math.round(ytest);
  xtest=Math.round(_info.point[0]);
  ytest=Math.round(_info.point[1]);
  computeField ();

}); // HtmlView Page setting action 'OnDrag' for element 'test'
          _view.netfield.linkProperty("SizeX",  function() { return Enetx; }, function(_v) { Enetx = _v; } ); // HtmlView Page linking property 'SizeX' for element 'netfield'
          _view.netfield.linkProperty("X",  function() { return xtest; }, function(_v) { xtest = _v; } ); // HtmlView Page linking property 'X' for element 'netfield'
          _view.netfield.linkProperty("Y",  function() { return ytest; }, function(_v) { ytest = _v; } ); // HtmlView Page linking property 'Y' for element 'netfield'
          _view.netfield.linkProperty("SizeY",  function() { return Enety; }, function(_v) { Enety = _v; } ); // HtmlView Page linking property 'SizeY' for element 'netfield'
          _view.Etext.linkProperty("X",  function() { return xtest+radius/2; } ); // HtmlView Page linking property 'X' for element 'Etext'
          _view.Etext.linkProperty("Y",  function() { return ytest+radius/2; } ); // HtmlView Page linking property 'Y' for element 'Etext'
          _view.Etext.linkProperty("Text",  function() { return "|E| = "+ _view._format(Enet,"0.00")+ " N/C "; } ); // HtmlView Page linking property 'Text' for element 'Etext'
          _view.controlPanel.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'controlPanel'
          _view.controlPanel.linkProperty("Display",  function() { return print?"none":"inline-flex"; } ); // HtmlView Page linking property 'Display' for element 'controlPanel'
          _view.comboBox.linkProperty("Options",  function() { return ["user_defined","vary test charge velocity","test charge velocity = zero","1 charge","Q₁=-5","Q₁=-4","Q₁=-3","Q₁=-2","Q₁=-1","Q₁=0","Q₁=1","Q₁=2","Q₁=3","Q₁=4","Q₁=5","2 charges","Q₂=-5","Q₂=-4","Q₂=-3","Q₂=-2","Q₂=-1","Q₂=0","Q₂=1","Q₂=2","Q₂=3","Q₂=4","Q₂=5","3 charges","Q₃=-5","Q₃=-4","Q₃=-3","Q₃=-2","Q₃=-1","Q₃=0","Q₃=1","Q₃=2","Q₃=3","Q₃=4","Q₃=5","4 charges","Q₄=-5","Q₄=-4","Q₄=-3","Q₄=-2","Q₄=-1","Q₄=0","Q₄=1","Q₄=2","Q₄=3","Q₄=4","Q₄=5","5 charges","Q₅=-5","Q₅=-4","Q₅=-3","Q₅=-2","Q₅=-1","Q₅=0","Q₅=1","Q₅=2","Q₅=3","Q₅=4","Q₅=5","","print"]; } ); // HtmlView Page linking property 'Options' for element 'comboBox'
          _view.comboBox.setAction("OnChange", function(_data,_info) {
  var opts = _view.comboBox.getProperty("SelectedOptions");  // array of options
      var option = (opts.length > 0)? opts[0]:""; // selected option
  if (option == "user_defined") {
  x[0] = 0;
  y[0] = 0;
  //x[1] = 0;
  //y[1] = 0;
  //x[2] = 0;
  //y[2] = 0;
  //x[3] = 0;
  //y[3] = 0;
  //x[4] = 0;
  //y[4] = 0;
      FieldFlag=true;
  }
  //"test charge velocity selectable","test charge velocity zero"
  else if (option =="vary test charge velocity") {
    vxtest = 1;
    vytest = -1;
    }
    else if (option =="test charge velocity = 0") {
    vxtest = 0;
    vytest = 0;
    }
  else if (option == "1 charge") {
   n = 1;
   x[0] = 0;
      y[0] = 0;

  var dx = (xmax-xmin)/(nVectors-1);
  var dy = (ymax-ymin)/(nVectors-1);
  //draw outside unused arrays lookang
  for (i = 0; i < nVectorsMax+1; i++)
  {
    for (j = 0; j < nVectorsMax+1; j++)
    {
     vectorIndex = i+nVectors*j;

     posx[vectorIndex]=xmin-2*dx;
      posy[vectorIndex]=ymin-2*dy; //put far away

    }
  }
  nVectors = 15;
  FieldFlag=true;
  var dx = (xmax-xmin)/(nVectors-1);
  var dy = (ymax-ymin)/(nVectors-1);
  for (i = 0; i < nVectors; i++)
  {
    for (j = 0; j < nVectors; j++)
    {
     vectorIndex = i+nVectors*j;

     posx[vectorIndex]=xmin+dx*i;
      posy[vectorIndex]=ymin+dy*j;
     textpos[vectorIndex] = ""+vectorIndex;
      Vectorx[vectorIndex] = xmin+dx*i;
      Vectory[vectorIndex] = ymin+dy*j;
    }
  }
  x[1] = -10;
  y[1] = -10;
  x[2] = -10;
  y[2] = -10;
  x[3] = -10;
  y[3] = -10;
  x[4] = -10;
  y[4] = -10;

     //text1="ϕ = "+ _view._format(Vnet,"0")+ " J/kg ,"+"|g| = "+ _view._format(Enet,"0.00")+ " m/s^2 ,"+"t = "+ _view._format(t,"0.00")+ " units ";
  }
  //print
  else if (option == "print"){
    print = true;
    }
  //print
  else if (option == "Q₁=-5") {
  q[0] = q0 = -5;
  }
  else if (option == "Q₁=-4") {
  q[0] = q0 = -4;
  }
  else if (option == "Q₁=-3") {
  q[0] = q0 = -3;
  }
  else if (option == "Q₁=-2") {
  q[0] = q0 = -2;
  }
  else if (option == "Q₁=-1") {
  q[0] = q0 = -1;
  }
  else if (option == "Q₁=0") {
  q[0] = q0 = 0;
  }
  else if (option == "Q₁=5") {
  q[0] = q0 = 5;
  }
  else if (option == "Q₁=4") {
  q[0] = q0 = 4;
  }
  else if (option == "Q₁=3") {
  q[0] = q0 = 3;
  }
  else if (option =="Q₁=2") {
  q[0] = q0 = 2;
  }
  else if (option == "Q₁=1") {
  q[0] = q0 = 1;
  }
  else if (option == "2 charges") {
   n = 2;
   x[0] = -2.5;
      y[0] = 0;
      x[1] = 2.5;
  y[1] = 0;
  var dx = (xmax-xmin)/(nVectors-1);
  var dy = (ymax-ymin)/(nVectors-1);
  //draw outside unused arrays lookang
  for (i = 0; i < nVectorsMax+1; i++)
  {
    for (j = 0; j < nVectorsMax+1; j++)
    {
     vectorIndex = i+nVectors*j;

     posx[vectorIndex]=xmin-2*dx;
      posy[vectorIndex]=ymin-2*dy; //put far away

    }
  }
  //nVectors = 15;
  FieldFlag=true;
  var dx = (xmax-xmin)/(nVectors-1);
  var dy = (ymax-ymin)/(nVectors-1);
  for (i = 0; i < nVectors; i++)
  {
    for (j = 0; j < nVectors; j++)
    {
     vectorIndex = i+nVectors*j;

     posx[vectorIndex]=xmin+dx*i;
      posy[vectorIndex]=ymin+dy*j;
     textpos[vectorIndex] = ""+vectorIndex;
      Vectorx[vectorIndex] = xmin+dx*i;
      Vectory[vectorIndex] = ymin+dy*j;
    }
  }
  x[2] = -10;
  y[2] = -10;
  x[3] = -10;
  y[3] = -10;
  x[4] = -10;
  y[4] = -10;


  }
  else if (option == "Q₂=-5") {
  q[1] = q1 = -5;
  }
  else if (option == "Q₂=-4") {
  q[1] = q1 = -4;
  }
  else if (option == "Q₂=-3") {
  q[1] = q1 = -3;
  }
  else if (option == "Q₂=-2") {
  q[1] = q1 = -2;
  }
  else if (option == "Q₂=-1") {
  q[1] = q1 = -1;
  }
  else if (option == "Q₂=0") {
  q[1] = q1 = 0;
  }
  else if (option == "Q₂=5") {
  q[1] = q1 = 5;
  }
  else if (option == "Q₂=4") {
  q[1] = q1 = 4;
  }
  else if (option =="Q₂=3") {
  q[1] = q1 = 3;
  }
  else if (option =="Q₂=2") {
  q[1] = q1 = 2;
  }
  else if (option == "Q₂=1") {
  q[1] = q1 = 1;
  }
  else if (option== "3 charges") {
   n = 3;
   x[0] = -2.5;
      y[0] = -2;
      x[1] = 2.5;
  y[1] = -2;
  x[2] = -0;
  y[2] = 3;
  var dx = (xmax-xmin)/(nVectors-1);
  var dy = (ymax-ymin)/(nVectors-1);
  //draw outside unused arrays lookang
  for (i = 0; i < nVectorsMax+1; i++)
  {
    for (j = 0; j < nVectorsMax+1; j++)
    {
     vectorIndex = i+nVectors*j;

     posx[vectorIndex]=xmin-2*dx;
      posy[vectorIndex]=ymin-2*dy; //put far away

    }
  }
  nVectors = 15;
  FieldFlag=true;
  var dx = (xmax-xmin)/(nVectors-1);
  var dy = (ymax-ymin)/(nVectors-1);
  for (i = 0; i < nVectors; i++)
  {
    for (j = 0; j < nVectors; j++)
    {
     vectorIndex = i+nVectors*j;

     posx[vectorIndex]=xmin+dx*i;
      posy[vectorIndex]=ymin+dy*j;
     textpos[vectorIndex] = ""+vectorIndex;
      Vectorx[vectorIndex] = xmin+dx*i;
      Vectory[vectorIndex] = ymin+dy*j;
    }
  }
  x[3] = -10;
  y[3] = -10;
  x[4] = -10;
  y[4] = -10;

  }
  else if (option == "Q₃=-5") {
  q[2] = q2 = -5;
  }
  else if (option == "Q₃=-4") {
  q[2] = q2 = -4;
  }
  else if (option == "Q₃=-3") {
  q[2] = q2 = -3;
  }
  else if (option == "Q₃=-2") {
  q[2] = q2 = -2;
  }
  else if (option == "Q₃=-1") {
  q[2] = q2 = -1;
  }
  else if (option == "Q₃=0") {
  q[2] = q2 = 0;
  }
  else if (option == "Q₃=5") {
  q[2] = q2 = 5;
  }
  else if (option == "Q₃=4") {
  q[2] = q2 = 4;
  }
  else if (option == "Q₃=3") {
  q[2] = q2 = 3;
  }
  else if (option == "Q₃=2") {
  q[2] = q2 = 2;
  }
  else if (option == "Q₃=1") {
  q[2] = q2 = 1;
  }
  else if (option == "4 charges") {
   n = 4;
   x[0] = -2.5;
      y[0] = -2.5;
      x[1] = 2.5;
  y[1] = -2.5;
  x[2] = 2.5;
  y[2] = 2.5;
  x[3] = -2.5;
  y[3] = 2.5;
  var dx = (xmax-xmin)/(nVectors-1);
  var dy = (ymax-ymin)/(nVectors-1);
  //draw outside unused arrays lookang
  for (i = 0; i < nVectorsMax+1; i++)
  {
    for (j = 0; j < nVectorsMax+1; j++)
    {
     vectorIndex = i+nVectors*j;

     posx[vectorIndex]=xmin-2*dx;
      posy[vectorIndex]=ymin-2*dy; //put far away

    }
  }
  nVectors = 15;
  FieldFlag=true;
  var dx = (xmax-xmin)/(nVectors-1);
  var dy = (ymax-ymin)/(nVectors-1);
  for (i = 0; i < nVectors; i++)
  {
    for (j = 0; j < nVectors; j++)
    {
     vectorIndex = i+nVectors*j;

     posx[vectorIndex]=xmin+dx*i;
      posy[vectorIndex]=ymin+dy*j;
     textpos[vectorIndex] = ""+vectorIndex;
      Vectorx[vectorIndex] = xmin+dx*i;
      Vectory[vectorIndex] = ymin+dy*j;
    }
  }
  x[4] = -10;
  y[4] = -10;

  }
  else if (option == "Q₄=-5") {
  q[3] = q3 = -5;
  }
  else if (option == "Q₄=-4") {
  q[3] = q3 = -4;
  }
  else if (option == "Q₄=-3") {
  q[3] = q3 = -3;
  }
  else if (option =="Q₄=-2") {
  q[3] = q3 = -2;
  }
  else if (option == "Q₄=-1") {
  q[3] = q3 = -1;
  }
  else if (option == "Q₄=0") {
  q[3] = q3 = 0;
  }
  else if (option == "Q₄=5") {
  q[3] = q3 = 5;
  }
  else if (option == "Q₄=4") {
  q[3] = q3 = 4;
  }
  else if (option == "Q₄=3") {
  q[3] = q3 = 3;
  }
  else if (option == "Q₄=2") {
  q[3] = q3 = 2;
  }
  else if (option == "Q₄=1") {
  q[3] = q3 = 1;
  }
  else if (option == "5 charges") {
   n = 5;
   x[0] = -2.5;
      y[0] = -2.5;
      x[1] = 2.5;
  y[1] = -2.5;
  x[2] = 2.5;
  y[2] = 2.5;
  x[3] = -2.5;
  y[3] = 2.5;
  x[4] = 0;
  y[4] = 0;
  var dx = (xmax-xmin)/(nVectors-1);
  var dy = (ymax-ymin)/(nVectors-1);
  //draw outside unused arrays lookang
  for (i = 0; i < nVectorsMax+1; i++)
  {
    for (j = 0; j < nVectorsMax+1; j++)
    {
     vectorIndex = i+nVectors*j;

     posx[vectorIndex]=xmin-2*dx;
      posy[vectorIndex]=ymin-2*dy; //put far away

    }
  }
  nVectors = 15;
  FieldFlag=true;
  var dx = (xmax-xmin)/(nVectors-1);
  var dy = (ymax-ymin)/(nVectors-1);
  for (i = 0; i < nVectors; i++)
  {
    for (j = 0; j < nVectors; j++)
    {
     vectorIndex = i+nVectors*j;

     posx[vectorIndex]=xmin+dx*i;
      posy[vectorIndex]=ymin+dy*j;
     textpos[vectorIndex] = ""+vectorIndex;
      Vectorx[vectorIndex] = xmin+dx*i;
      Vectory[vectorIndex] = ymin+dy*j;
    }
  }

  }
  else if (option == "Q₅=-5") {
  q[4] = q4 = -5;
  }
  else if (option == "Q₅=-4") {
  q[4] = q4 = -4;
  }
  else if (option == "Q₅=-3") {
  q[4] = q4 = -3;
  }
  else if (option == "Q₅=-2") {
  q[4] = q4 = -2;
  }
  else if (option == "Q₅=-1") {
  q[4] = q4 = -1;
  }
  else if (option == "Q₅=0") {
  q[4] = q4 = 0;
  }
  else if (option == "Q₅=5") {
  q[4] = q4 = 5;
  }
  else if (option == "Q₅=4") {
  q[4] = q4 = 4;
  }
  else if (option == "Q₅=3") {
  q[4] = q4 = 3;
  }
  else if (option == "Q₅=2") {
  q[4] = q4 = 2;
  }
  else if (option == "Q₅=1") {
  q[4] = q4 = 1;
  }
  computeField ();

}); // HtmlView Page setting action 'OnChange' for element 'comboBox'
          _view.comboBox.linkProperty("Font",  function() { return font; }, function(_v) { font = _v; } ); // HtmlView Page linking property 'Font' for element 'comboBox'
          _view.ShowField.linkProperty("Checked",  function() { return FieldFlag; }, function(_v) { FieldFlag = _v; } ); // HtmlView Page linking property 'Checked' for element 'ShowField'
          _view.n22.linkProperty("Maximum",  function() { return nVectorsMax; }, function(_v) { nVectorsMax = _v; } ); // HtmlView Page linking property 'Maximum' for element 'n22'
          _view.n22.linkProperty("Value",  function() { return nVectors; }, function(_v) { nVectors = _v; } ); // HtmlView Page linking property 'Value' for element 'n22'
          _view.n22.setAction("OnChange", function(_data,_info) {
  //sent to far away first
  for (i = 0; i < nVectorsMax+1; i++)
  {
    for (j = 0; j < nVectorsMax+1; j++)
    {
     vectorIndex = i+nVectors*j;

     posx[vectorIndex]=xmin-2*dx;
      posy[vectorIndex]=ymin-2*dy; //put far away

    }
  }
  // put in according to spacing
  var dx = (xmax-xmin)/(nVectors-1);
  var dy = (ymax-ymin)/(nVectors-1);
  for (i = 0; i < nVectors; i++)
  {
    for (j = 0; j < nVectors; j++)
    {
     vectorIndex = i+nVectors*j;

     posx[vectorIndex]=xmin+dx*i;
      posy[vectorIndex]=ymin+dy*j;
     textpos[vectorIndex] = ""+vectorIndex;
      Vectorx[vectorIndex] = xmin+dx*i;
      Vectory[vectorIndex] = ymin+dy*j;
    }
  }

}); // HtmlView Page setting action 'OnChange' for element 'n22'
          _view.comboBox2.linkProperty("Options",  function() { return ["2","3","4","5","6","7","8","9","10","11","12","13","14","15 field vectors"]; } ); // HtmlView Page linking property 'Options' for element 'comboBox2'
          _view.comboBox2.setAction("OnChange", function(_data,_info) {
  var opts = _view.comboBox2.getProperty("SelectedOptions");  // array of options
      var option = (opts.length > 0)? opts[0]:""; // selected option
  if (option == "2") {
  nVectors = 2;
  FieldFlag=true;
  } else if (option == "3") {
   nVectors = 3;
  FieldFlag=true;
  }
  else if (option == "4") {
   nVectors = 4;
  FieldFlag=true;
  }
  else if (option == "5") {
   nVectors = 5;
  FieldFlag=true;
  }
  else if (option == "6") {
   nVectors = 6;
  FieldFlag=true;
  }
  else if (option == "7") {
   nVectors = 7;
  FieldFlag=true;
  }
  else if (option == "8") {
   nVectors = 8;
  FieldFlag=true;
  }
  else if (option == "9") {
   nVectors = 9;
  FieldFlag=true;
  }
  else if (option == "10") {
   nVectors = 10;
  FieldFlag=true;
  }
  else if (option == "11") {
   nVectors = 11;
  FieldFlag=true;
  }
  else if (option == "12") {
   nVectors = 12;

  FieldFlag=true;
  }
  else if (option == "13") {
   nVectors = 13;
  FieldFlag=true;
  }
  else if (option == "14") {
   nVectors = 14;
  FieldFlag=true;
  }
  else if (option == "15 field vectors") {
   nVectors = 15;
  FieldFlag=true;
  }
  //sent to far away first
  for (i = 0; i < nVectorsMax+1; i++)
  {
    for (j = 0; j < nVectorsMax+1; j++)
    {
     vectorIndex = i+nVectors*j;

     posx[vectorIndex]=xmin-2*dx;
      posy[vectorIndex]=ymin-2*dy; //put far away

    }
  }
  // put in according to spacing
  var dx = (xmax-xmin)/(nVectors-1);
  var dy = (ymax-ymin)/(nVectors-1);
  for (i = 0; i < nVectors; i++)
  {
    for (j = 0; j < nVectors; j++)
    {
     vectorIndex = i+nVectors*j;

     posx[vectorIndex]=xmin+dx*i;
      posy[vectorIndex]=ymin+dy*j;
     textpos[vectorIndex] = ""+vectorIndex;
      Vectorx[vectorIndex] = xmin+dx*i;
      Vectory[vectorIndex] = ymin+dy*j;
    }
  }
  //make();

}); // HtmlView Page setting action 'OnChange' for element 'comboBox2'
          _view.comboBox22.linkProperty("Options",  function() { return ["1","2","3","4","5"]; } ); // HtmlView Page linking property 'Options' for element 'comboBox22'
          _view.comboBox22.setAction("OnChange", function(_data,_info) {
  var opts = _view.comboBox22.getProperty("SelectedOptions");
   var option = (opts.length > 0)? opts[0]:""; // selected option
  if (option == "1") {
  n = 1;
  x[1] = 10; //out of screen
  y[1] = 10;
  x[2] = 10;
  y[2] = 10;
  x[3] = 10;
  y[3] = 10;
  x[4] = 10;
  y[4] = 10;
  } else if (option == "2") {
  n = 2;
  x[1] = (Math.random()-0.5)*(xmax-xmin);
  y[1] = (Math.random()-0.5)*(ymax-ymin);
  x[2] = 10;
  y[2] = 10;
  x[3] = 10;
  y[3] = 10;
  x[4] = 10;
  y[4] = 10;
  }
  else if (option == "3") {
  n = 3;
  x[2] = (Math.random()-0.5)*(xmax-xmin);
  y[2] = (Math.random()-0.5)*(ymax-ymin);
  x[3] = 10;
  y[3] = 10;
  x[4] = 10;
  y[4] = 10;
  }
  else if (option == "4") {
  n = 4;
  x[3] = (Math.random()-0.5)*(xmax-xmin);
  y[3] = (Math.random()-0.5)*(ymax-ymin);
  x[4] = 10;
  y[4] = 10;
  }
  else if (option == "5") {
  n = 5;
  x[4] = (Math.random()-0.5)*(xmax-xmin);
  y[4] = (Math.random()-0.5)*(ymax-ymin);
  }
  _initialize();

}); // HtmlView Page setting action 'OnChange' for element 'comboBox22'
          _view.playPauseButton2.setAction("OffClick", function(_data,_info) {
  text="paused";
  _pause();

}); // HtmlView Page setting action 'OffClick' for element 'playPauseButton2'
          _view.playPauseButton2.linkProperty("State",  function() { return _isPaused; } ); // HtmlView Page linking property 'State' for element 'playPauseButton2'
          _view.playPauseButton2.setAction("OnClick", function(_data,_info) {
  _play();
  text="playing";

}); // HtmlView Page setting action 'OnClick' for element 'playPauseButton2'
          _view.playPauseButton2.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'playPauseButton2'
          _view.button.setAction("OnPress", function(_data,_info) {
  _initialize();

}); // HtmlView Page setting action 'OnPress' for element 'button'
          _view.button.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'button'
          _view.resetButton2.setAction("OnClick", function(_data,_info) {
  _reset();

}); // HtmlView Page setting action 'OnClick' for element 'resetButton2'
          _view.resetButton2.linkProperty("Font",  function() { return fontb; }, function(_v) { fontb = _v; } ); // HtmlView Page linking property 'Font' for element 'resetButton2'
          break;
      } // end of switch
    }; // end of new reset

    _model.setView(_view);
    _model.reset();
    _view._enableEPub();
  } // end of _selectView

  _model.setAutoplay(false);
  _model.setFPS(20);
  _model.setStepsPerDisplay(20);
  _selectView(_model._autoSelectView(_getViews())); // this includes _model.reset()
  return _model;
}

function electricfieldwee_View (_topFrame,_viewNumber,_libraryPath,_codebasePath) {
  var _view;
  switch(_viewNumber) {
    case -10 : break; // make Lint happy
    default :
    case 0: _view = electricfieldwee_View_0 (_topFrame); break;
  } // end of switch

  if (_codebasePath) _view._setResourcePath(_codebasePath);

  if (_libraryPath) _view._setLibraryPath(_libraryPath);


  return _view;
} // end of main function

function electricfieldwee_View_0 (_topFrame) {
  var _view = EJSS_CORE.createView(_topFrame);

  _view._reset = function() {
    _view._clearAll();
    _view._addElement(EJSS_INTERFACE.panel,"full", _view._topFrame) // EJsS HtmlView.HtmlView Page: declaration of element 'full'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"topPanel", _view.full) // EJsS HtmlView.HtmlView Page: declaration of element 'topPanel'
      .setProperty("Height","100%") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'topPanel'
      .setProperty("Width","100%") // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'topPanel'
      .setProperty("CSS",{   "position" : "absolute",   "top" : "0%",    "margin-left":"0px",    "left":"0%" }) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'topPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.plottingPanel,"plottingPanel", _view.topPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'plottingPanel'
      .setProperty("Height","100%") // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'plottingPanel'
      .setProperty("Gutters",[0,0,0,0]) // EJsS HtmlView.HtmlView Page: setting property 'Gutters' for element 'plottingPanel'
      .setProperty("YScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'YScalePrecision' for element 'plottingPanel'
      .setProperty("AxisYFont","normal normal 1vw") // EJsS HtmlView.HtmlView Page: setting property 'AxisYFont' for element 'plottingPanel'
      .setProperty("XTickStep",1) // EJsS HtmlView.HtmlView Page: setting property 'XTickStep' for element 'plottingPanel'
      .setProperty("YTickStep",1) // EJsS HtmlView.HtmlView Page: setting property 'YTickStep' for element 'plottingPanel'
      .setProperty("XAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'XAutoTicks' for element 'plottingPanel'
      .setProperty("GridXShow",false) // EJsS HtmlView.HtmlView Page: setting property 'GridXShow' for element 'plottingPanel'
      .setProperty("Background","rgba(100,100,100,0.6)") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'plottingPanel'
      .setProperty("Title","Charge Field Vector Model") // EJsS HtmlView.HtmlView Page: setting property 'Title' for element 'plottingPanel'
      .setProperty("Enabled",true) // EJsS HtmlView.HtmlView Page: setting property 'Enabled' for element 'plottingPanel'
      .setProperty("SquareAspect",true) // EJsS HtmlView.HtmlView Page: setting property 'SquareAspect' for element 'plottingPanel'
      .setProperty("YAutoTicks",false) // EJsS HtmlView.HtmlView Page: setting property 'YAutoTicks' for element 'plottingPanel'
      .setProperty("GridYShow",false) // EJsS HtmlView.HtmlView Page: setting property 'GridYShow' for element 'plottingPanel'
      .setProperty("AxisXFont","normal normal 1vw") // EJsS HtmlView.HtmlView Page: setting property 'AxisXFont' for element 'plottingPanel'
      .setProperty("AutoScaleY",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleY' for element 'plottingPanel'
      .setProperty("AutoScaleX",false) // EJsS HtmlView.HtmlView Page: setting property 'AutoScaleX' for element 'plottingPanel'
      .setProperty("XScalePrecision",0) // EJsS HtmlView.HtmlView Page: setting property 'XScalePrecision' for element 'plottingPanel'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"fieldpoint", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'fieldpoint'
      .setProperty("FillColor","Orange") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'fieldpoint'
      .setProperty("SizeX",5) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'fieldpoint'
      .setProperty("ShapeType","ELLIPSE") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'fieldpoint'
      .setProperty("SizeY",5) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'fieldpoint'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'fieldpoint'
      ;

    _view._addElement(EJSS_DRAWING2D.arrowSet,"arrowSet", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'arrowSet'
      .setProperty("FillColor","Green") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'arrowSet'
      .setProperty("LineColor","rgba(50,255,50,1.0)") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'arrowSet'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'arrowSet'
      .setProperty("Offset","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'arrowSet'
      ;

    _view._addElement(EJSS_DRAWING2D.textSet,"textSet2", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'textSet2'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'textSet2'
      ;

    _view._addElement(EJSS_DRAWING2D.trail,"trail", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'trail'
      .setProperty("LineColor","White") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'trail'
      .setProperty("DrawLines",true) // EJsS HtmlView.HtmlView Page: setting property 'DrawLines' for element 'trail'
      .setProperty("NoRepeat",true) // EJsS HtmlView.HtmlView Page: setting property 'NoRepeat' for element 'trail'
      .setProperty("LineWidth",2) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'trail'
      ;

    _view._addElement(EJSS_DRAWING2D.group,"group", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'group'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"earth", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'earth'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'earth'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'earth'
      ;

    _view._addElement(EJSS_DRAWING2D.shapeSet,"earth2", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'earth2'
      .setProperty("FillColor","url(#mygrandient2)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'earth2'
      .setProperty("RelativePosition","CENTERED") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'earth2'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'earth2'
      ;

    _view._addElement(EJSS_DRAWING2D.textSet,"textSet", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'textSet'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"velocity", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'velocity'
      .setProperty("EnabledSize","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledSize' for element 'velocity'
      .setProperty("LineColor","Magenta") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'velocity'
      .setProperty("LineWidth",3) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'velocity'
      .setProperty("Offset","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'Offset' for element 'velocity'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"test2", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'test2'
      .setProperty("FillColor","White") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'test2'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'test2'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'test2'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'test2'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'test2'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'test2'
      ;

    _view._addElement(EJSS_DRAWING2D.shape,"test", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'test'
      .setProperty("FillColor","url(#mygrandient1)") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'test'
      .setProperty("SizeX",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeX' for element 'test'
      .setProperty("ShapeType","WHEEL") // EJsS HtmlView.HtmlView Page: setting property 'ShapeType' for element 'test'
      .setProperty("SizeY",20) // EJsS HtmlView.HtmlView Page: setting property 'SizeY' for element 'test'
      .setProperty("PixelSize",true) // EJsS HtmlView.HtmlView Page: setting property 'PixelSize' for element 'test'
      .setProperty("EnabledPosition","ENABLED_ANY") // EJsS HtmlView.HtmlView Page: setting property 'EnabledPosition' for element 'test'
      ;

    _view._addElement(EJSS_DRAWING2D.arrow,"netfield", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'netfield'
      .setProperty("LineColor","Cyan") // EJsS HtmlView.HtmlView Page: setting property 'LineColor' for element 'netfield'
      .setProperty("LineWidth",3) // EJsS HtmlView.HtmlView Page: setting property 'LineWidth' for element 'netfield'
      ;

    _view._addElement(EJSS_DRAWING2D.text,"Etext", _view.plottingPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'Etext'
      .setProperty("FillColor","White") // EJsS HtmlView.HtmlView Page: setting property 'FillColor' for element 'Etext'
      .setProperty("RelativePosition","SOUTH_WEST") // EJsS HtmlView.HtmlView Page: setting property 'RelativePosition' for element 'Etext'
      ;

    _view._addElement(EJSS_INTERFACE.panel,"controlPanel", _view.full) // EJsS HtmlView.HtmlView Page: declaration of element 'controlPanel'
      .setProperty("CSS",{   "position" : "absolute",   "top" : "5%",    "margin-right":"0px",    "right":"0%" }) // EJsS HtmlView.HtmlView Page: setting property 'CSS' for element 'controlPanel'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"comboBox", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'comboBox'
      .setProperty("Tooltip","select user_defined and drag the mass") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'comboBox'
      ;

    _view._addElement(EJSS_INTERFACE.checkBox,"ShowField", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'ShowField'
      .setProperty("Text","ShowField") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'ShowField'
      ;

    _view._addElement(EJSS_INTERFACE.slider,"n22", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'n22'
      .setProperty("Minimum",2) // EJsS HtmlView.HtmlView Page: setting property 'Minimum' for element 'n22'
      .setProperty("ShowText",true) // EJsS HtmlView.HtmlView Page: setting property 'ShowText' for element 'n22'
      .setProperty("Format","00") // EJsS HtmlView.HtmlView Page: setting property 'Format' for element 'n22'
      .setProperty("Background","Green") // EJsS HtmlView.HtmlView Page: setting property 'Background' for element 'n22'
      .setProperty("Step",1) // EJsS HtmlView.HtmlView Page: setting property 'Step' for element 'n22'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"comboBox2", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'comboBox2'
      .setProperty("Height",0) // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'comboBox2'
      .setProperty("Width",0) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'comboBox2'
      .setProperty("Tooltip","number of field vectors") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'comboBox2'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'comboBox2'
      ;

    _view._addElement(EJSS_INTERFACE.imageAndTextButton,"n", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'n'
      .setProperty("Height",0) // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'n'
      .setProperty("Width",0) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'n'
      .setProperty("Tooltip","number of masses to generate resultant vector field ") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'n'
      .setProperty("Foreground","White") // EJsS HtmlView.HtmlView Page: setting property 'Foreground' for element 'n'
      .setProperty("Text"," N = ") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'n'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'n'
      ;

    _view._addElement(EJSS_INTERFACE.comboBox,"comboBox22", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'comboBox22'
      .setProperty("Height",0) // EJsS HtmlView.HtmlView Page: setting property 'Height' for element 'comboBox22'
      .setProperty("Width",0) // EJsS HtmlView.HtmlView Page: setting property 'Width' for element 'comboBox22'
      .setProperty("Tooltip","number of mass") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'comboBox22'
      .setProperty("Visibility",false) // EJsS HtmlView.HtmlView Page: setting property 'Visibility' for element 'comboBox22'
      ;

    _view._addElement(EJSS_INTERFACE.twoStateButton,"playPauseButton2", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'playPauseButton2'
      .setProperty("TextOn","►") // EJsS HtmlView.HtmlView Page: setting property 'TextOn' for element 'playPauseButton2'
      .setProperty("Tooltip","Play/Pause") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'playPauseButton2'
      .setProperty("TextOff","❚❚") // EJsS HtmlView.HtmlView Page: setting property 'TextOff' for element 'playPauseButton2'
      ;

    _view._addElement(EJSS_INTERFACE.button,"button", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'button'
      .setProperty("Text","▼") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'button'
      ;

    _view._addElement(EJSS_INTERFACE.button,"resetButton2", _view.controlPanel) // EJsS HtmlView.HtmlView Page: declaration of element 'resetButton2'
      .setProperty("Tooltip","Reset") // EJsS HtmlView.HtmlView Page: setting property 'Tooltip' for element 'resetButton2'
      .setProperty("Text","↻") // EJsS HtmlView.HtmlView Page: setting property 'Text' for element 'resetButton2'
      ;

  };

  return _view;
}


//--><!]]></script>
  </head>
  <body>
    <div role="button" id="_topFrame" style="text-align:center"></div>

    <script type="text/javascript"><!--//--><![CDATA[//><!--
      var _model;
      var _scorm;
      window.addEventListener('load',
        function () {
          _model =  new electricfieldwee("_topFrame","_ejs_library/",null);
          if (typeof _isApp !== "undefined" && _isApp) _model.setRunAlways(true);
          TextResizeDetector.TARGET_ELEMENT_ID = '_topFrame';
          TextResizeDetector.USER_INIT_FUNC = function () {
            var iBase = TextResizeDetector.addEventListener(function(e,args) {
              _model._fontResized(args[0].iBase,args[0].iSize,args[0].iDelta);
              },null);
            _model._fontResized(iBase);
          };
          _model.onload();
        }, false);
    //--><!]]></script>
  </body>
</html>
